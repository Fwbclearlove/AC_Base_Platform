硕士学位论文

基于优先级的时间敏感网络

流量调度算法研究

学 生 姓 名 李红硕

学 号 2021316190120

学科(专业学位) 电子信息(控制工程方向)

研 究 方 向 控制理论与控制工程

导 师 李超

校 外 导 师 李睿凡

2024 年6 月4 日

Research on Traffic Scheduling Algorithm for

Time-Sensitive NetworkingBased on Priority

A Dissertation Submitted to

North China University of Technology

In partial fulfillment of the requirement

For the professional degree of

Master of Engineering

North China University of Technology

June, 2024

基于优先级的时间敏感网络流量调度算法研究

近年来，科技的快速发展使得工业自动化、车载网络、航空航天等诸多领域

的新技术不断涌现，这些技术对于低时延、高可靠性的要求越来越高。传统以太

网由于自身的技术局限性导致其难以提供确定性传输服务，已经很难满足新技术

的传输要求。时间敏感网络是IEEE 工作组在传统以太网基础上拓展得来的一种

新型确定性网络，通过一系列流量整形与调度策略的标准来增强带宽能力，改善

数据传输的确定性，同时符合以太网标准体系，因此具备很好的互联互通性，应

用前景广阔。目前对于时间敏感网络的研究主要分为时钟同步、流量调度、可靠

传输和资源管理4 个方向，其中流量调度是保证时间敏感网络实现确定性传输的

核心机制，对于流量调度算法的研究已经成为控制领域的研究热点。时间触发类

流量是时间敏感网络中最为关键的业务流量，对于这类流量的调度主要是通过门

控列表配置传输时隙以保证其低时延、低抖动的性能要求。但是现有研究多以帧

为对象进行调度方法的设计，需要计算每一帧的具体时隙分配，存在计算复杂度

过高的问题。另外，在进行路由规划时仅考虑链路利用率，不能保证实时调度场

景下流量的可调度性。

本文针对上述问题，将以帧为调度对象改进为以时间窗口为调度对象，基于

时间窗口设计了整数线性规划调度方法。同时面向流量的可调度性，基于绝对优

先级进行了路由优化算法的设计。论文的主要工作分为以下3 个方面：

（1）研究了时间敏感网络的完全集中式配置模型，结合软件定义网络搭建

了系统模型，将控制平面进行逻辑化集中，对整个时间敏感网络拓扑的调度算法

进行统一设计并下发至数据平面中的各个交换机。另外，对时间敏感网络的网络

模型与流量模型进行了形式化表达。

（2）研究了面向时间触发流的调度机制，针对帧时隙配置求解复杂的问题，

将以帧为调度对象改进为以时间窗口为调度对象，基于时间窗口设计了整数线性

规划调度方法，同时提出了改进时间窗口偏移量方法以优化端到端时延性能。仿

真实验表明所设计的调度方法在保证时间触发流的流量特性基础上降低了计算

复杂度，验证了该调度方法的有效性。

（3）研究了面向时间触发流的路由优化问题。在现有网络拓扑中新增时间

触发流的情况下，考虑拓扑的整体路由规划，提出了一种基于绝对优先级的实时

调度路由算法，确保拓扑中的所有流量在截止时间内完成传输，提高了时间触发

流的可调度性。仿真实验表明所设计的路由优化算法降低了时间触发流的端到端

时延，提高了调度成功率，验证了该路由优化算法的有效性。

关键词：时间敏感网络，软件定义网络，流量调度，整数线性规划，路由优

化，绝对优先级

Research on Traffic Scheduling Algorithm for

Time-Sensitive Networking Based on Priority

Abstract

In recent years, the continuous development and progress of science and

technology has led to the emergence of new technologies in industrial automation,

vehicle networks, aerospace and many other fields, which have increasingly high

requirements for low latency and reliability. Traditional Ethernet is not able to provide

deterministic transmission services due to its own technological limitations, therefore

it has become difficult to meet the transmission requirements of new technologies.

Time-sensitive networking (TSN) is a new type of deterministic network developed

by IEEE working group that expands on traditional Ethernet. TSN enhances

bandwidth capacity and improves the deterministic nature of data transmission

through a series of standards for traffic shaping and scheduling policies. Due to the

fact that TSN follows the Ethernet standard system, it naturally has good

interconnectivity and broad application prospects. Current research on TSN is divided

into four main directions: clock synchronization, traffic scheduling, reliable

transmission, and resource management. Traffic scheduling is a core mechanism to

ensure deterministic transmission in TSN. The study of traffic scheduling algorithms

has become a hot research topic in the field of control. Time-triggered (TT) traffic is

the most critical service traffic in TSN, and the scheduling of this type of traffic is

mainly done by configuring the transmission time slots through the Gate Control List

(GCL) to ensure its low-latency and low-jitter performance requirements. However,

the existing research mostly uses frames as the object for the design of scheduling

methods and needs to calculate the specific time slot allocation of each frame, which

has the problem of excessive computational complexity. In addition, existing

researches only consider link utilization when performing route planning, which does

not guarantee schedulability of traffic in real-time scheduling scenarios.

In this thesis, in order to solve the complex problem of time slot allocation, we

have improved the scheduling object from frames to time windows and designed an

integer linear programming (ILP) scheduling method based on time windows. We

have oriented towards traffic schedulability and designed a route optimization

algorithm based on Strict Priority (SP). The main work of this thesis is divided into

the following three aspects:

(1) A fully centralized configuration model for TSN is investigated, and a system

model is built combining the advantages of Software Defined Networking (SDN).

Logical centralization of the control plane ensures that scheduling algorithms for the

entire TSN topology can be uniformly designed and distributed to individual switches

in the data plane. In addition, a formal representation of the network model and the

traffic model of TSN is presented.

(2) A time-triggered flow-oriented scheduling mechanism is investigated, and the

frame-based scheduling object is improved to a time window-based scheduling object

to address the complexity of solving time slot configurations. An integer linear

programming scheduling method is designed based on the time window, while an

improved time window offset method is proposed to optimize the end-to-end delay

performance. Simulation experiments show that the designed scheduling method

reduces the computational complexity while guaranteeing the flow characteristics of

the time-triggered flow. Simulation experiments verify the effectiveness of the

designed scheduling method.

(3) The problem of routing path optimization for time-triggered flows is

investigated. A Real-time Scheduling Strict Priority Routing Algorithm (RS-SP) is

proposed considering the overall routing planning of the topology when

time-triggered flows are added to an existing network topology. It ensures that all

traffic in the topology completes its transmission within the deadline, improving the

schedulability of time-triggered flows. Simulation experiments show that the designed

route optimization algorithm improves the end-to-end delay and scheduling success

rate of time-triggered flows, verifying the effectiveness of the designed route

optimization algorithm.

Key words: time-sensitive networking, software defined networking, traffic

scheduling, integer linear programming, routing optimization, strict priority

第一章绪论...............................................................................................1

1.1 研究背景与意义...............................................................................1 1.2 国内外研究现状...............................................................................3

1.2.1 TT 流调度方法的研究现状........................................................3 1.2.2 TT 流路由规划方法的研究现状................................................5 1.3 主要研究内容...................................................................................6 1.4 论文结构...........................................................................................7 第二章系统模型与调度模型设计..........................................................9

2.1 TSN 系统模型设计...........................................................................9

2.1.1 完全集中式配置模型.................................................................9 2.1.2 系统建模必要性分析...............................................................10 2.1.3 基于TSSDN 的系统模型........................................................11 2.2 TT 流调度模型设计........................................................................17

2.2.1 数据帧格式与流量优先级分类...............................................17 2.2.2 网络模型...................................................................................18 2.2.3 流量模型...................................................................................19 2.3 本章小结.........................................................................................20 第三章基于时间窗口的TT 流调度方法.............................................21

3.1 TT 流调度问题分析........................................................................21 3.2 基于时间窗口的ILP 调度方法....................................................23

3.2.1 调度变量定义...........................................................................23 3.2.2 调度约束表达...........................................................................23 3.2.3 目标函数定义...........................................................................26 3.2.4 实验仿真与验证.......................................................................27 3.3 改进时间窗口偏移量.....................................................................30

3.3.1 时间窗口偏移量优化方法.......................................................30 3.3.2 实验仿真与验证.......................................................................32 3.4 本章小结.........................................................................................34 第四章基于绝对优先级的TT 流路由规划方法.................................35

4.1 TT 流路由问题分析........................................................................35 4.2 基于绝对优先级的实时调度路由算法........................................35

4.2.1 优先级选择...............................................................................36 4.2.2 算法设计...................................................................................36 4.3 实验仿真与验证.............................................................................41

4.3.1 仿真环境介绍...........................................................................41 4.3.2 仿真平台搭建...........................................................................42 4.3.3 仿真实验结果分析...................................................................45 4.4 本章小结.........................................................................................48 第五章结论与展望................................................................................49

5.1 主要结论.........................................................................................49 5.2 研究展望.........................................................................................50 参考文献...................................................................................................51

第一章 绪论

第一章 绪论

1.1 研究背景与意义

随着科技的不断发展进步，诸多行业领域中的新技术层出不穷，其中很多技

术都需要确定性低时延的传输保证。例如，工业自动化领域中对于工控网络的端

到端时延要求一般在几微秒到几毫秒之间[1]；汽车自动驾驶领域中对于车载网络

的端到端时延要求一般在250μs 之内[2]；航空航天领域中对于航空电子全双工交

换以太网的端到端时延要求一般在128ms 之内[3]。除了低时延的传输性能外，这

些行业领域还需要微秒级的抖动以及极低的丢包率。传统以太网通过多个设备共

享同一物理网络链路的带宽来提高资源利用率[4]，但缺乏确定性传输机制会导致

数据包的传输时间和顺序无法得到保证，因此只能提供“尽力而为（Best-effort）”

的传输服务，难以满足上述行业领域的传输需求。为解决以上问题，IEEE802.1

对传统以太网进行了扩展，制定了一套时间敏感网络（Time-sensitive Networking，

TSN）协议标准，通过一系列流量整形与调度策略的标准来增强带宽能力并改善

数据传输的确定性。另外，时间敏感网络采用标准以太网架构，因此具有高度互

联性，能够在提供确定性低时延传输服务的同时有效降低数据传输的复杂性[5]。

时间敏感网络在OSI 七层模型中主要面向第二层数据链路层，它具有以下特

点：（1）时钟同步：IEEE 802.1AS[6]标准定义了时钟同步机制。精确的全局时

钟同步是目前大部分TSN 标准的基本要求，通过全局时钟同步保证准确的数据

传输时隙匹配和时序精确性。 （2）确定性时延与低抖动：TSN 通过IEEE 802.1Qbv[7]

标准中定义的时间感知整形器（Time-aware Shaper，TAS）机制可以实现对时间

触发数据的确定性传输。TAS 机制采用时间感知的调度算法，可以根据数据流

的时序要求对数据包进行精确的排队和调度，使得数据传输过程中所有路由路径

的节点在每个时刻的行为都是可预估的，从而保证确定性和低抖动的时延性能。

（3）冗余保证：IEEE 802.1CB[8]标准中定义了一种帧复制与消除机制，在数据

传输过程中，可根据需要复制并标记帧。接收端设备接收多个复制帧并根据标记

信息消除冗余帧，从而保证TSN 数据传输的可靠性和鲁棒性。（4）兼容性：对

于时延与抖动等传输要求不同的时间触发（Time-triggered，TT）流、音视频桥

接（Audio Video Bridging，AVB）流和尽力而为（Best-effort，BE）流，TSN 允

许它们在同一网络中传输，并通过调度机制满足它们各自的时延需求。另外TSN

是在传统以太网基础上建立起来的一种开放式标准，允许不同厂商的TSN 设备

第一章 绪论

互相兼容[9]。（5）灵活的管理：IEEE 802.1Qci 定义了一种灵活的服务质量（Quality

of Service，QoS）管理机制，可以根据不同的流量类型和服务需求对数据流进行

分类和处理。由于TSN 具备确定性传输性能保障的优势以及良好的互联互通性，

使其成为了广大学者研究实时通信技术的热点和重点。

流量调度是确保TSN 确定性传输的核心机制。时间敏感网络中包含三类业

务流量：时间触发（TT）流、音视频桥接（AVB）流和尽力而为（BE）流，不

同业务流对端到端延时及带宽需求存在差异。通过流量调度，TSN 可以对各类

数据流进行高效的管理与控制，并保证优先级较高的数据优先传输，同时满足不

同业务流量的特定要求。这种调度结果的实现需要结合各种调度机制，以确保网

络中的数据流能够按照其时序要求得到传输，从而提高网络的确定性和可靠性，

满足实时通信应用的需求。目前时间敏感网络采用的调度机制包括帧抢占（Frame

Preemption, FP）、周期排队转发（Cyclic Queuing and Forwarding, CQF）、时间

感知整形器（Time-Aware Shaper, TAS）、异步流量调度器（Asynchronous Traffic

Shaper, ATS）、基于信用值的整形器（Credit-based Shaper, CBS）。针对TT 流

的调度多建立在TAS 机制的基础上，它使用时分多址（Time Division Multiple

Access，TDMA）思想，利用门控列表（Gate Control List，GCL）来配置数据帧

的传输时隙，确保TT 流按照预定时序传输。然而，数据帧的时隙配置求解问题

已被验证为是NP 完全问题（Nondeterminism Polynomial Complete problem）[10]，

帧传输时隙的调度方案需要计算每一帧的具体时隙分配，计算复杂度过高。另外，

目前对于TT 流路由算法的研究多考虑链路利用率的加权最短路径优先算法

（weighted Shortest Path First，wt-SPF），当现有拓扑中新增加TT 流时不能保证

拓扑中各流量的可调度性。由于TT 流是TSN 业务流量中优先级最高且最为关键

的流量，因此如何有效减少时隙配置求解问题的计算复杂度，如何有效增强TT

流的可调度性，不仅对TT 流调度具有至关重要的作用，还对TSN 确定性传输具

有重要意义。

针对上述问题，本文引入时间窗口作为TAS 机制的调度对象，通过一种整

数线性规划算法的设计在保证TT 流量时延特性的基础上有效减少计算复杂度；

面向实时调度场景，基于绝对优先级传输选择机制设计了一种实时调度路由算

法，有效增加了TT 流的调度成功率，同时有效减少了TT 流的平均端到端时延；

搭建仿真平台进行验证，利用对比仿真实验证明了本文流量调度方法与路由优化

算法的有效性。本研究对于TSN 流量调度与路由规划具有重要的意义。

第一章 绪论

1.2 国内外研究现状

IEEE 802.1Qbv 标准中并未对流量调度方法与路由算法做出具体规定，因此

在TSN 中，如何进行有效的流量调度方法与路由规划算法设计仍然是一个需要

研究和探讨的领域。目前对于TT 流调度方面的研究大多数针对帧传输时隙的调

度方案，通过精确的时隙配置保证TT 流低时延低抖动的流量特性，但对调度过

程的计算复杂度考虑不充分；对于TT 流路由方面的研究大多基于最短路径优先

算法优化可调度性，考虑静态路由场景下链路利用率和端到端时延指标的优化，

对于实时调度场景下的TT 流可调度性研究较少。

1.2.1 TT 流调度方法的研究现状

时间触发类流量是保证时间敏感网络确定性传输的关键流量，其特性是具有

严格的低时延和低抖动约束。目前，时间触发流的调度方法主要基于时间感知整

形器（TAS）机制，大部分研究都在该框架内对其进行优化。TAS 的机制原理可

以概括为：首先通过8 个带优先级属性的队列对不同优先级的流量进行隔离，然

后在其内部的门控列表中划分好各队列流量的传输时隙，通过门控列表的循环运

行控制队列的开关门动作，从而实现传输过程的时间隔离。由于TT 流的传输优

先级最高，所以TAS 机制可以保证TT 流按照预先规划好的时隙进行传输，不受

其他业务流量的干扰，达到更低的时延与抖动。TAS 机制的核心在于生成门控

列表。门控列表的生成是在链路约束、隔离约束、流传输约束等限制条件下，根

据流量性能要求求最小时延解，从而得到数据帧的具体传输时隙，这是一个较为

复杂的过程。已有研究证明目前并无已知算法可在多项式时间内得到最优的帧传

输时隙调度方案[11]，因此对于帧传输时隙调度方案的研究主要在离线环境下完

Dürr 等人[12]将帧传输时隙调度方案的求解问题等效成无等待车间的调度问

题，使用禁忌搜索算法求解保护带最少情况下的帧传输时隙调度方案，使保护带

平均降低了24%左右，带宽利用率获得了有效提高。这也为帧传输时隙调度方案

的求解提供了一个思路：可将其等效为无等待数据包的调度问题，不考虑流的等

待机制，默认排队时延为0，在这种条件下求解调度方案。基于此思想，裴金川

等人[13]以降低拥塞冲突导致的时延为目标，结合TT 流量特性建立了调度约束模

型，同时也指出缺少流等待机制会导致流的可调度性降低。Jin X 等人[14]提出了

一种消息分段和无等待调度的联合算法，通过最大限度的减少数据包数量提高了

流的可调度性。Zhang Y 等人[15]构造了一个具有时间感知整形器的无等待转发模

型，并将其转换为流感知模型以简化调度，有效提高了调度速度。

第一章 绪论

对帧传输时隙进行求解归根结底是为了保障TT 流低时延的流量特性，因此

如何通过调度方法降低端到端时延是大批学者的研究重点。整数线性规划

（Integer Linear Programming，ILP）作为一种数学规划方法，其机制是在满足一

系列线性约束的条件下对整数变量的目标函数进行优化，它可以在有限的资源条

件下做出最优的决策，而且整数变量的限制使得结果更符合TT 流调度情况，因

此众多研究利用整数线性规划方法来求解帧传输时隙调度问题。Schweissguth 等

人[16]首次基于整数线性规划提出了一种ILP 调度方法，将流量调度过程表示为多

目标组合优化问题，联合优化TT 流时延和占用队列数，使用ILP 求解器得出具

体时隙配置。Nayak 等人[17]引入最大调度传输负荷和跳数系数，在此基础上求解

时隙配置，大大减少了TT 流时延。李佳庆等人[18]通过优化门控调度的启发式算

法求解帧时隙配置，有效降低了TT 流的平均时延。Schweissguth E 等人[19]提出

了一种资源受限的优化方法，该方法侧重于支持多播流，并大大减少了ILP 模型

占用的资源。Pang Z 等人[20]结合无冲突调度提出了一种ILP 方法，考虑在线与

离线两种情况，通过ILP 求解器分别得出帧时隙配置。文献[21]-[23]将蚁群算法、

遗传算法等启发式算法与ILP 模型相结合，通过约束表达与目标函数对帧传输时

隙进行求解，降低TT 流端到端时延。

可满足性模理论（Satisfiability Modulo Theories ，SMT）和优化模理论

（Optimization Modulo Theories，OMT）也经常用于求解约束优化问题，通过SMT

检验约束条件是否满足，并将结果作为OMT 的组成部分，在给出满足约束的变

量取值基础上求解目标函数最优解。文献[24]-[25]探讨了基本以太网约束、

802.1Qbv 约束、用户约束等TSN 离线调度所需的约束，并首次提出采用SMT

搜索与OMT 求解的方式求解调度方案，通过正确的调度约束实现TT 流确定性

行为的增强。Craciunas 等人[26]提出了一种基于SMT 调度合成的分解方法，引入

了一个依赖树来管理应用程序在帧之间施加的约束，将调度问题分解成更小的子

集，从而有效处理大量约束，显著改进了调度的可扩展性。Kannamma R 等人[27]

提出了基于增强图卷积网络的深度强化学习解决方案，用于解决实际通信环境中

的联合优化问题。Li Q 等人[28]基于SMT 提出了一种面向工业场景的流量调度方

法，并依据工业背景提出了一系列调度约束，采用基期周期定期更新门控列表，

有效减少了所需求解的帧传输时隙条目，增加了门控列表的配置效率。任杰[29]

将SMT 与容限分析算法相结合，提高了复杂场景中TAS 机制的调度能力。

综上，目前国内外对于TT 流调度方法的研究主要是基于TAS 机制构建调度

模型，通过ILP、SMT、OMT 等理论求解约束满足问题，保证TT 流低时延低抖

动的流量特性，从而提高TT 流的可调度性，优化TAS 机制的调度能力。但在帧

传输时隙调度方案求解时，现有研究对计算复杂度考虑不足，在实际应用中计算

第一章 绪论

复杂度过高将会导致求解时间过长，这对于具有低时延要求的流量来说是十分不

1.2.2 TT 流路由规划方法的研究现状

帧传输时隙调度方案的求解属于在时间维度上提高TSN 流量的可调度性，

但是传输时隙需要在路由路径已知的情况下进行求解，因此可调度性不仅仅取决

于时间维度，空间维度的路由策略同样起着至关重要的作用。在规模较大的多跳

TSN 网络中，即使帧传输时隙方案可以做到理论上的低时延，但可能会由于路

由路径的低效率导致整体调度方案产生额外的排队时延，使整体调度效果并不理

想。因此，通过优化TSN 的路由路径减少流量路由过程的跳数，使得要调度的

流量进行尽可能少的转发操作，这种路由规划方法可以突破调度瓶颈，并能有效

改善TT流的可调度性。对于TSN路由规划方法的研究同样受到了众多学者关注。

Gavriluţ V 等人[30]将k-最短路径（K-Shortest Paths，KSP）算法与贪婪随机自

适应搜索（Greedy Randomized Adaptive Search Procedure，GRASP）算法相结合

进行路由路径优化方案的求解。Pop P 等人[31]综合考虑网络拓扑结构和流量路由

路径两个因素，以此为基础提出了三种策略：拓扑和路由启发式策略；GRASP

元启发式策略；约束规划策略。通过这些策略确定冗余链路，使流量调度过程在

满足TT 流的时延要求下获得容错保障。Huang 等人[32]基于Dijkstra 算法提出了

一种调度感知路由算法，通过感知TT 流周期来确定每条TT 流的传输路径，有

效减少了路由冲突情况的发生，提高了时间触发流的可调度性。Huang K 等人[33]

考虑周期流的带宽利用问题，探讨了不同时段不同流之间的可组合性，提出了一

种周期感知路由算法。此算法加强了不同时段流在无冲突情况下的共享带宽能

力，使原有路由可容纳更多流量，有效提高了调度成功率。Nayak 等人[34]引入最

大计划流量负载作为度量用于TT 流的路由，提出了一种基于ILP 的路由算法，

与最短路径路由算法和等成本多路径路由算法相比将TT 流可调度性分别提高了

60%和30%。冯泽坤等人[35]同样基于ILP 提出了动态流量均衡路由算法，通过增

量计算降低网络拓扑变化对路由产生的影响，提高了TT 流可调度性。文献

[36]-[37]均基于负载均衡路由算法，通过最大可能避免拥塞链路实现端到端时延

的优化和高度的负载均衡。Yu Q 等人[38]提出了一种自适应组路由算法，通过预

处理、调度合成和后处理三个阶段对路由进行自适应分组，简化整体拓扑结构并

寻找最优路由路径。Bülbül S 等人[39]重点关注路由问题的求解效率，提出了一种

强化学习算法，通过不断与网络环境交互来学习最佳路由策略，得到接近最优的

路由规划（接近1.5%）。Feng Z 等人[40]关注在线调度过程中TT 流路由冗余问题，

基于离线路由和调度算法提出了一种更有效的启发式路由算法，有效提升了路由

第一章 绪论

冗余度。Yu Q 等人[41]同样面向在线调度过程，设计了一种启发式广度优先搜索

路由算法。离线阶段通过引入最小距离树增加可重用调度结果，在线阶段通过所

提路由算法尽可能的重用离线阶段的结果，有效解决了TSN 面临动态传输需求

变化引起的挑战。

不同业务流在TSN 交换机的相同出端口转发时导致的相互冲突也是调度过

程中需要考虑的要素，这需要对帧传输时隙的求解和路由路径的优化进行综合考

虑。一些学者已经展开了对路由与调度联合方案的研究。Atallah A 等人[42]基于

迭代整数线性规划调度（Iterated Integer Linear Programming based Scheduling，

IIS）技术，采用一种流分区机制降低IIS 迭代之间的冲突度（Degree of Conflic，

DoC），提高IIS 的成功率；并由DoC 感知的多路径路由技术保证容错性，进一

步提高调度成功率。杨思锦等人[43]基于深度强化学习设计了联合路由和缓存队列

的混合资源调度方案，通过路由与调度联合方案实现了调度过程的迭代更新，有

效提高了TT 流可调度性。Yang L 等人[44]基于图卷积网络解决实际通信场景中的

联合优化问题，提出深度强化学习解决方案，采用优先级经验重放来加快模型训

练过程的收敛速度，提高了联合优化任务的可行性。Xu L 等人[45]同样基于强化

学习，设计了一种可扩展调度路由协同设计体系结构。基于探索的领域知识和实

际需求的特征流数据集建立了一种流划分方法，并构造了调度与路由协同设计约

束，提高了TT 流的可调度性。Li J 等人[46]解决了需要冗余和安全情况下的时间

敏感网络路由和调度联合问题，提出了一种基于模拟退火的元启发式算法，通过

求解路由与调度联合规划的约束条件找到成本函数的最优解。

综上，目前国内外对于TT 流路由规划方法的研究主要基于最短路径优先算

法，通过随机自适应搜索、周期感知、负载均衡等思想对最短路径进行优化，同

时基于强化学习、图卷积网络等思想进行路由与调度联合方案的研究。但在进行

路由规划时大多数研究主要考虑链路利用率，对于实时调度场景下流量的可调度

性问题考虑不足，这将导致新增流量与现有节点中流量发生冲突从而产生调度失

1.3 主要研究内容

本文以IEEE 802.1Qbv 标准中定义的TAS 机制为重点，探讨了时间敏感网

络的流量调度方法与路由优化算法。TAS 机制主要面向具有低时延低抖动要求

的周期性时间触发类流量，是保证时间敏感网络实现确定性传输的关键机制。本

文主要研究内容如下：

（1）研究了时间敏感网络的系统模型与调度模型，为方便全局拓扑中流量

第一章 绪论

调度方法与路由优化算法的下发配置，本文基于软件定义网络搭建了系统模型。

应用软件定义网络数控平面分离的思想，将时间敏感网络的调度功能集成到中央

控制器，并对时间同步模块、逐流过滤和监管模块、多流量调度模块等核心模块

的搭建过程进行了阐述。同时，在控制平面上对时间敏感网络流量调度的网络模

型与流量模型进行了形式化定义。

（2）针对帧传输时隙求解的计算复杂度优化问题，本文提出了一种基于时

间窗口的ILP 调度方法。时间感知整形器的核心是门控调度，通过精确计算每条

流量在交换机出端口的帧传输时隙来构建门控列表，保证TT 流的无冲突传输。

本文将传统调度方法中的以帧为调度对象改进为以时间窗口为调度对象，调度变

量由求解所有帧实例的传输时刻变为求解时间裕度，目标函数设置为最小化全部

TT 流的总端到端时延。依托变量更新之后的调度模型建立核心约束条件，通过

Gurobi 对于ILP 模型进行约束求解，求解结果显示为帧到时间窗口的分配以及时

间窗口的开闭时刻。仿真实验表明基于时间窗口的ILP 调度方法可以在满足时间

触发流的流量特性基础上有效降低计算复杂度，与基于帧的调度方法相比具有更

小的端到端时延和更快的求解时间，验证了所设计调度方法的有效性。

（3）针对实时调度场景下TT 流的路由问题，本文提出了一种基于绝对优

先级的实时调度路由算法。当TSN 网络拓扑中新增加TT 流时，新增加流量能否

在截止时间内完成传输是关系到其能否调度成功的关键，同时新增加的流量可能

会与TSN 节点的其他流量发生冲突导致这些流量产生额外的排队时延。本文将

最坏情况下的端到端时延作为路由决策，通过链路消耗与节点消耗对路由策略进

行范围缩减。然后将剩余路由策略进行绝对优先级传输选择计算，通过最坏情况

下的端到端时延与TT 流截止时间对比进行最终的路由策略选定。仿真实验表明

基于绝对优先级的实时调度路由算法优化了TT 流的调度成功率以及拓扑中原有

流量与新增流量的总端到端时延，与最短路径优先算法、基于绝对优先级的传输

选择算法以及基于信用值的传输选择算法相比具有更小的丢包率和端到端时延，

验证了所设计路由算法的有效性。

1.4 论文结构

本文的主要章节内容如下：

第一章为绪论。介绍了本文的研究背景与意义，总结了目前有关时间敏感网

络中时间触发类流量调度方法与路由优化算法的研究现状，并简要介绍了本文的

主要研究内容。

第二章为系统模型与调度模型设计。首先对TSN 的系统建模必要性进行分

第一章 绪论

析，然后详细阐述了TSN 基于数控平面分离原理的系统建模过程，最后在系统

的控制平面上对流量调度的网络模型与流量模型进行建模。

第三章为基于时间窗口的TT 流调度方法。首先对TT 流门控调度问题进行

了分析，然后将以帧为调度对象改进为以时间窗口为调度对象，基于时间窗口设

计了一种整数线性规划流量调度方法。依托调度变量的更新设计了时间窗口定义

约束、时间窗口有序约束、传输约束等关键约束表达式，并设计了一种时间窗口

偏移量改进方法优化端到端时延。最后基于Python 搭建仿真平台，通过Gurobi

求解调度结果，并将本文所提出的调度方法与基于帧的ILP 调度方法、基于时间

窗口的OMT 调度方法进行了对比仿真实验。

第四章为基于绝对优先级的TT 流路由规划方法。首先对TT 流路由问题进

行了分析，然后对队列优先级选择方法及路由决策部分进行设计，包括传输时延、

传播时延、排队时延、处理时延四个部分。定义最坏情况下端到端时延和最坏情

况下链路时延，与TT 流截止时间对比进行路由决策，并通过绝对优先级传输选

择进行二次路由决策，最终获得所有TT 流的确定路由路径。最后基于OMNET++

搭建仿真平台，将本文所提出的路由优化算法与最短路径优先算法、基于绝对优

先级的传输选择算法以及基于信用值的传输选择算法进行了对比仿真实验。

第五章为结论与展望。总结了本文的主要研究内容，指出了本文的主要贡献

和不足，并展望了时间敏感网络流量调度方法的未来研究方向。

第二章 系统模型与调度模型设计

第二章 系统模型与调度模型设计

本章对TSN 系统建模过程进行了阐述，包括建模必要性的分析、基于TSSDN

的系统模型以及各个核心模块的实现流程。同时，对TSN 流量调度的网络模型

与流量模型进行了形式化定义。

2.1 TSN 系统模型设计

2.1.1 完全集中式配置模型

IEEE 802.1 TSN 任务组制定了一系列标准以保证数据确定性传输，这些标准

统称为TSN 协议簇。由于实际场景的通信需求，部分TSN 标准仍在研制中，但

在科研人员的大力推动下，TSN 核心标准已经趋于完善。TSN 的核心标准主要

包括时钟同步、流量调度、资源管理和可靠传输四个方面，如图2-1 所示。

图2-1 TSN 核心标准

为了管理网络中TT 流数据的传输，提前为这些数据预留足够的带宽资源，

以确保它们能够按时传输并保证服务质量，IEEE 802.1Qat[47]标准定义了流预留

机制（Stream Reservation Protocol，SRP）。SRP 机制分为注册和预留两个步骤。

在注册阶段，网络中的设备会通过MRP（Multiple Registration Protocol）的MMRP

（Multiple MAC Registration Protocol ）、MVRP（Multiple VLAN Registration

Protocol）和MSRP（Multiple Stream Reservation Protocol）等协议[48]，向网络中

的节点注册时间触发流的需求和属性。在预留阶段，根据注册信息，为这些流提

前预留足够的带宽资源，以确保它们的传输不受其他数据流的影响。通过SRP

机制，一般情况下网络可以预留75%的带宽资源提供给TT 流传输，其余25%则

第二章 系统模型与调度模型设计

用于保障非TT 流传输。同时IEEE 802.1Qcc[49]标准定义了三种网络配置模型来

提高流预留机制的配置和管理能力，这三种模型分别为完全集中式配置模型、完

全分布式配置模型、集中式网络/分布式用户配置模型。

目前主流的配置模型是完全集中式，这种模型由集中式用户配置（Centralized

User Configuration，CUC）和集中式网络配置（Centralized Network Configuration，

CNC）两个关键组件组成，如图2-2 所示。CUC 主要面向用户，其功能可总结

为以下几点：（1）负责与终端用户进行交互，收集用户对网络资源的需求信息；

（2）向CNC 请求网络拓扑信息，包括网络的物理结构和资源分配情况；（3）

收集流量的源节点、目的节点、周期、大小、最大时延等网络资源需求，并将这

些信息发送给CNC；（4）与用户端设备通信，传达网络配置信息和调度表。而

CNC 主要面向网络，其功能可总结为以下几点：（1）接收来自CUC 的用户需

求信息，并根据网络的物理拓扑结构和资源要求制定网络中流量的调度表；（2）

负责网络中流量的调度和分发，确保网络的流量控制和质量保证；（3）将制定

的调度表分发给各个终端设备，指导它们如何实现网络中流量的调度；（4）根

据网络拓扑结构或资源需求的变化，动态调整网络配置和调度策略。通过完全集

中式配置模型，IEEE 802.1Qcc 协议为TSN 提供了灵活的配置和管理能力，支持

各种网络应用的需求，提高了TSN 的确定性和可靠性。

图2-2 完全集中式配置模型

2.1.2 系统建模必要性分析

IEEE 802.1Qcc 标准所定义的完全集中式配置模型通过引入了一个用于中央

网络管理的控制器实现对SRP 机制的增强，然而该控制器只是一个集中配置单

元，既没有指定控制器和交换机之间的标准化接口，也没有提取网络设备的控制

第二章 系统模型与调度模型设计

平面功能。这意味着流量从发送设备到接收设备的路径规划需要在交换机上进行

配置，并且流量在各个交换机上何时允许传输也都需要在交换机本地做出决策。

这种系统模型缺乏全局网络视图，没有中央控制功能，会对调度算法设计时的灵

活性和可编程性产生限制。另外，完全集中式配置模型中的SRP 表不允许流表

的重新配置，这也不利于后续调度算法的调试。因此现有的配置模型并不能满足

调度方法设计的需要，在进行TSN 流量调度研究时，为方便全局拓扑调度方法

与路由算法的设计与调试，对TSN 进行系统建模是很有必要的。

2.1.3 基于TSSDN 的系统模型

软件定义网络（Software-Deﬁned Networking，SDN）作为一种新型网络架

构，已被证明其在网络管理和拓扑优化方面存在巨大优势[50]。软件定义网络的核

心思想就是把网络的控制层与数据层分开，使其具有集中管理、灵活性、可编程

性等特点。数据平面负责帧转发，例如交换结构和流(转发)表，而控制平面负责

路由决策与调度方法的设计并相应地配置数据平面。在SDN 中，控制平面被整

合在一个逻辑上集中的SDN 控制器中，只有数据平面留在交换机中。SDN 控制

器运行网络操作系统，通过配置交换机对整个网络进行管理和控制。在SDN 交

换机内部，有一个SDN 代理。该代理实现与SDN 控制器的通信，并更新交换机

内部的流表。该流表的内容定义了交换机数据平面所执行的转发操作，即哪个传

入流量(例如通过源、目的地址和/或端口号标识)被转发到哪个输出端口。SDN

的优势体现在：（1）由于SDN 控制器能够监控整个网络的状态并做出决策，SDN

可以实现全局最优的网络管理。控制器可以根据网络的整体状态和需求，动态地

调整流表规则，从而达到优化网络资源利用率、提高系统整体性能的目的。（2）

在传统网络中，使用复杂的分布式网络控制协议（如生成树协议或最短路径桥接）

来实现网络控制和管理。而在SDN 中，由于集中式架构，每个交换机直接与控

制器通信，避免了这些复杂协议的需求，简化了网络管理的过程。（3）集中式

的SDN 架构使准入控制更易实施，控制器可以根据网络策略，动态地配置流表

规则，阻止或限制非关键流量进入网络，从而预防或减轻网络拥塞。（4）SDN

架构可以支持运行时的网络重新配置，使得网络在发生故障时能够快速恢复。控

制器可以重新路由关键流量，绕过故障组件或链路，从而保证网络的可靠性和连

本章基于TSN 与SDN 相结合的时间敏感软件定义网络（Time-Sensitive

Software-Defined Networking，TSSDN）来搭建TSN 系统模型。由于TSN 的流

量调度方法是在网络拓扑中各个TSN 交换机出端口进行配置的，这种分布式配

第二章 系统模型与调度模型设计

置方式会增加设计的复杂程度。结合SDN 数控分离的思想，本模型将TSN 交换

机的调度功能集成到逻辑上的中央控制器，对全局调度算法进行统一设计，这种

系统模型对于本文后续提出的基于时间窗口的调度方法以及实时调度场景下的

路由优化算法都更为有利。

时间敏感网络系统模型由数据平面与控制平面组成，如图2-3 所示。控制平

面包括控制层和应用层，控制层负责调度方法、路由优化算法的设计，同时负责

与上下层的通信，通过流表下发的方式控制数据平面的转发行为；应用层指的是

网络应用程序，一般可对控制层进行远程控制。数据平面包括交换设施层，由

TSN 交换机组成，主要负责流表解析与部署，根据控制层所下达的调度方法对

数据进行转发传输操作。

图2-3 TSN 系统模型

为了将TSN 功能与SDN 融合，需要设计一些核心模块，接下来对这些模块

第二章 系统模型与调度模型设计

（1）时间同步模块

TSSDN 中的所有网络设备都需要具有精确和同步的时间，由时间同步模块

管理，确保所有设备在网络中保持时间一致性。这对于协调基于时间的调度和流

量控制至关重要。时间同步是通过IEEE 802.1AS[51]定义的广义精确时钟协议

（general Precision Time Protocol，gPTP）实现的，它的机制原理如图2-4 所示。

图2-4 时间同步机制原理图

实现步骤可以概括如下：

1）主时钟选择：每个网络设备都会发送一条包含自身时钟性能信息的

Announce 报文。设备收到Announce 报文后，通过最佳主时钟算法（Best Master

Clock Algorithm，BMCA）选择性能最好的设备作为主时钟，其他设备则作为从

时钟。主时钟通过发送Sync 报文与从时钟同步。

2）同步报文交互：主时钟定期发送Sync 报文，从时钟接收Sync 报文后记

录时间戳。从时钟根据接收时间戳和本地时钟时间计算时钟偏差。

3）跟随报文交互：主时钟发送Follow 报文，从时钟接收Follow 报文后记

录接收时间戳。从时钟根据接收时间戳和本地时钟时间计算时钟偏差。

4）延迟请求报文和延迟响应报文交互：从时钟发送DelayReq 报文请求主时

钟的延迟时间。主时钟接收DelayReq 报文后立即发送DelayResp 报文，从时钟

记录DelayReq 和DelayResp 的时间戳。从时钟根据DelayReq 和DelayResp 的时

间戳计算传播时延。

5）时钟偏差和传播时延计算：根据同步报文、跟随报文、延迟请求报文和

延迟响应报文的交互情况，计算主从时钟之间的时钟偏差和传播时延。当传播路

径一致时，主从时钟相互发送报文的传播时延 delay T 相等，则有：

2 1 delay T T T     (2-1)

第二章 系统模型与调度模型设计

4 3 delay T T T     (2-2)

其中表示时钟偏差，根据式（2-1）和式（2-2）可计算出传播时延 delay T 和

时钟偏差：

2 1 4 3 ( ) 2 delay

T T T T T     (2-3)

2 1 4 3 ( ) 2 T T T T      (2-4)

6）时钟偏差校准：各从时钟根据计算出的时钟偏差值对自身时钟进行偏差

校准，调整本地时钟的频率和相位来进行时间同步。

（2）逐流过滤和监管模块

此模块部署于交换机的入端口，用于对业务流量进行过滤和流量控制，提供

对每条业务流量的细粒度控制，以确保网络资源的有效利用，保证服务质量。本

文设计的TSSDN 系统模型主要服务于时间触发类流量（TT 流），因此本模块

将优先确保TT 流的及时传输和处理。本模块是通过IEEE 802.1Qci 标准定义的

逐流过滤和监管机制（Per-Stream Filtering and Policing，PSFP）实现的，PSFP

机制可以根据每条业务流量的特定要求和策略，对流量进行过滤和分类。流量的

精确控制和管理可以通过定义过滤规则和条件来实现。PSFP 机制可以对经过过

滤的业务流量进行流量控制，包括速率限制、丢弃策略等，有助于确保网络资源

的合理分配，避免某些流量占用过多带宽导致其他流量受影响。同时PSFP 机制

提供了对每个网络流的细粒度控制能力，可以根据流量的特性和需求对其进行个

性化的过滤和流量控制，有助于增强网络的适应能力。PSFP 机制可以为不同的

数据流提供不同的服务质量保证，根据流量的重要性和特点，可以为其分配合适

的带宽和优先级，确保TT 流的传输质量。

（3）多流量控制模块

此模块部署于交换机的出端口，将已经通过流量过滤与分类之后的各种类型

业务流量进行优先级排队、流量调度和整形等操作，提高对流量的处理效率和可

靠性，模块实现过程示意如图2-5 所示。流量通过交换机入端口的逐流过滤和监

管模块后会被分为TT 流、AVB 流和BE 流三种业务类型，然后进入多流量控制

模块中进行优先级排队，根据流量业务类型与优先级选择对应算法进行流量调度

与整形，最后在交换机出端口按调度后顺序将各种流量进行转发传输。由于本章

设计的TSSDN 系统模型主要为了方便TT 流调度方法的设计，因此流量调度过

程主要建立在IEEE 802.1 Qbv[52]标准所定义的门控调度机制基础之上，通过控制

各优先级队列的开关门时刻来隔离其他业务流对TT 流的传输影响，门控机制的

第二章 系统模型与调度模型设计

实现过程将在后文进行详细介绍。

图2-5 多流量控制模块实现过程

AVB 流和BE 流属于事件触发类流量，其中BE 流是无时延要求的流量，只

需要在其他流量无传输任务时进行传输即可，无需进行额外的流量整形操作。而

AVB 流主要承载时延要求比TT 流低的软实时应用类流量，此类流量多是突发性

的媒体数据，因此需要对其进行流量整形控制突发数据流的速率，保证数据流的

稳定传输。对于AVB 流的整形是通过IEEE 802.1Qav[53]标准中所定义的基于信

用的整形机制（Credit Based Shaper，CBS）来实现的。通过CBS 机制，可以在

不影响TT 流优先级的情况下，尽可能保证AVB 流的传输质量，使得两者同时

有效传输。在CBS 机制中，数据只有在队列的信用值（credit ）大于等于0 时才

被允许传输，CBS 机制通过4 个关键参数进行配置：发送速率sendSlope 、空闲

速率idleSlope 、信用值上限hiCredit 、信用值下限loCredit 。CBS 机制的实现步

1）设置credit ：为每个队列设置一个信用值，初始时可以将信用值置为0。

2）数据传输准备：当一个队列中的AVB 流准备传输数据时，需要检查该队

列的credit 是否大于等于0。

3）数据传输：

credit 下降：当AVB 流开始传输数据时，队列的信用值以发送速率sendSlope

为斜率线性下降。也就是说随着数据的传输，队列的信用值会逐渐减小。

停止传输：如果其他队列正在传输数据，或者当前队列的信用值降至0 以下，

则当前队列必须停止传输数据。

credit 增加：一旦停止传输，队列的信用值以空闲速率idleSlope 为斜率线性

增加。这意味着在数据传输暂停期间，队列的信用值会慢慢增加。

如果队列的信用值credit 累积到hiCredit 或者降低到loCredit ，那么当前

第二章 系统模型与调度模型设计

credit 保持不变。

4）数据等待：如果队列中的AVB 流没有数据等待传输，那么CBS 机制会

自动将该队列的credit 调整为0。

5）重复步骤：以上步骤会循环执行，以确保在数据传输和数据等待之间保

持平衡，同时根据credit 的变化来控制数据的传输。

通过以上步骤，CBS 机制可以动态调整传输AVB 流队列的信用值，保证

AVB 流的服务质量。CBS 机制信用值变化过程如图2-6 所示。

图2-6 CBS 机制信用值变化过程示意图

（4）TT 流调度模块

此模块是为了对控制层下发的TT 流调度方法进行配置而设计的，调度方法

中通过调度表配置TT 流的传输时间。所有网络设备都需要按照调度表中的规定

进行流量调度，以确保TT 流的及时传输。调度方法的设计将在后文详细展开。

（5）SRP 模块

此模块封装了上文所介绍的SRP 机制，通过为TT 流预留大部分带宽优先保

证TT 流传输，同时协调AVB 流和BE 流的带宽资源，保证它们能够达到各自的

业务流量要求。

第二章 系统模型与调度模型设计

2.2 TT 流调度模型设计

2.2.1 数据帧格式与流量优先级分类

本小节对TSN 的数据帧格式以及数据流量类型和优先级分类标准做一个简

单介绍，这些是流量调度研究中的必备知识。

（1）数据帧格式

IEEE 802.1Q[54]标准在以太网帧基础上进行扩展，定义了TSN的数据帧格式，

如图2-7 所示。TSN 数据帧的总长度为最小64 字节，最大1552 字节，实际的数

据帧长度取决于数据字段的大小以及是否启用了拥塞控制等功能。

图2-7 TSN 数据帧格式

数据帧格式中各字段所代表的含义如表2-1 所示。

表2-1 TSN 数据帧格式中各字段含义[55]

字段 长度 含义

Preamble 7byte 前导码

SFD 1byte 帧起始定界符

MAC Destination 6byte 目的MAC 地址

MAC Source 6byte 源MAC 地址

Tag Protocol Identifiter 2byte 标签协议识别：判断是否为802.1Q 帧

Priority Code Point 3bits 优先级代码点：表示帧的QoS 优先级

Drop Eligible Indicator 1bits 丢弃标志位：值为1 时，表示可以丢弃网络中

低优先级的数据，以保证高优先级数据的QoS

VLAN Identifiter 12bits VLAN 标识符

第二章 系统模型与调度模型设计

Ether Type/ Length 2byte 后续数据域的长度/协议类型

Payload 42-1500byte 数据域

FCS 4byte 帧校验序列

（2）流量优先级分类

在IEEE 802.1Q 帧格式中，优先级代码点（PCP）字段用于表示帧的优先级，

共有8 个不同的优先级，优先级从低到高取值范围为0 到7。PCP 值越大，表示

该流的优先级越高。根据流量类型和优先级的映射关系，一般情况下，网络中的

BE（Best Effort）流的PCP 值默认为0，而其优先级值为1，这意味着BE 流的

优先级是高于BK（Background）流的。通过设置不同流的PCP 值，网络设备可

以根据PCP 字段中的值对帧进行分类和处理，从而实现不同优先级流量的区分

和优先级处理，提高网络的服务质量和性能。TSN 流量类型和优先级如表2-2 所

表2-2 TSN 流量类型和优先级[55]

PCP 值 优先级 数据流量类型 英文及缩写

1 0 背景流 Background (BK)

0 1 尽力而为流 Best Effort (BE)

2 2 服务保障流 Excellent Effort (EE)

3 3 关键应用流 Critical Application (CA)

4 4 视频流 Video (VI)

5 5 音频流 Voice (VO)

6 6 网络间控制流 Internetwork Control (IC)

7 7 网络控制流 Network Control (NC)

2.2.2 网络模型

TSN 物理网络为全双工交换式互联网络，可表示为有向图 ( , ) G V E  ，如图

2-8 所示。其中V 为点集，表示网络中的交换机（SW）和端系统（ES）。图中

包括２个交换机和４个端系统，交换机有多个入端口和出端口，负责根据GCL

将帧转发至对应出端口；端系统通常指的是具备感知、执行、存储功能的终端控

制单元。E V V   为边集，其中每个元素代表1 条单向链路。节点 av 与 bv 间的

物理链路对应2 条单向链路[ , ] a b v v 和[ , ] b a v v 并可以通过三元组 , , ab ab ab c d n  定

义，分别表示带宽容量、传播时延以及相连的出端口队列数。图中包含5 条物理

链路，10 条单向链路。

第二章 系统模型与调度模型设计

图2-8 TSN 物理网络示例

2.2.3 流量模型

时间敏感网络主要负责传输的业务流量类型包括时间触发类流量和事件触

发类流量，其中事件触发类流量又分为音/视频流量和尽力而为流量。一般情况

下，时间触发类流量的传输优先级最高，音/视频流量次之，尽力而为流量最低。

时间触发类流量用于时间约束较严格，需要确定性低时延保证的实时应用；音/

视频流量用于软实时应用，相比时间触发类流量的时间约束较为宽松；尽力而为

流量用于无时间约束的应用。时间触发类流量（TT 流）为周期性数据传输，周

期长度和数据大小先验可知，本文主要围绕TT 流进行调度方法设计，保证其低

时延和低抖动传输，因此只对TT 流进行形式化定义。从发送端 1iv 经过中间节点

2 ( 1) ,...,

i i i n v v  到达接收端

i in v 的TT 流 is ，其路径 iR 可表示为

1 2 2 3 ( 1) [[ , ],[ , ],...,[ , ]] i i i i i i i n in v v v v v v  。每条 is 采用四元组[ , , , ] i i i i L J T  定义，分别表示最

大端到端时延、最大可容忍抖动、流量载荷和周期长度。定义

[ , ] a b v v F 表示通过链

路[ , ] a b v v 的流集合。将通过链路[ , ] a b v v 上的所有TT 流周期的最小公倍数记为超

[ , ] [ , ] { , } a b a b v v v v i i hp lcm T s F   。调度机制只需确定１个超周期的GCL 并在多个

超周期循环执行。

[ , ] a b v v ip 表示 is 在与链路[ , ] b a v v 相连的出端口上的队列分配，有

[ , ] a b v v i ab p n  。

所有业务流在时间敏感网络中均以帧为传输单位，每一帧的载荷不超过以太

网最大传输单元（MTU）即1500B。

[ , ] a b v v iF 为流 is 在链路[ , ] a b v v 上传输的帧传输

实例的集合， [ , ] a b v v ijf 为其中的第j 个帧传输实例。 [ , ] a b v v ijf 可由三元组

第二章 系统模型与调度模型设计

[ [ , ] , ] [ , ] , , a b a b a b v v v v ij ij ij

v v T l   定义，分别表示传输时刻、周期长度和传输时长。每个帧

在传输路径的每条链路上均产生１个帧传输实例。

2.3 本章小结

本章首先介绍了完全集中式配置模型并通过其局限性分析了TSN 系统建模

的必要性，然后提出了一种基于TSSDN 的TSN 系统模型，根据TSN 功能对各

个模块进行了设计，最后对TSN 的网络模型与流量模型进行了形式化定义，为

后续调度方法与路由算法的设计提供了系统层面的基础。

第三章 基于时间窗口的TT 流调度方法

第三章 基于时间窗口的TT 流调度方法

本章对基于时间窗口的ILP 调度方法进行了阐述，包括对门控调度机制与所

面临问题的介绍，对GCL 元组形式定义、调度变量设计、约束条件设计、目标

函数设计、求解结果介绍。同时通过仿真实验评估了基于时间窗口的ILP 调度方

法在计算复杂度方面的表现，并针对其在时延性能方面的短板提出了时间窗口偏

移量的优化方法。

3.1 TT 流调度问题分析

在IEEE 802.1Qbv 标准中，为了保障TT 流传输时的端到端低时延，引入了

时间感知整形器（TAS）的概念。时间感知整形器利用时分多址技术，将数据流

划分为8 个带有优先级指标的队列，将传输时间划分为若干个循环周期，并将每

个周期又划分为两个时间槽。其中，时间槽1 被用来对优先级指标为7（时间触

发流）的流量进行调度，而时间槽2 则被用来对其他优先级（事件触发流）的流

量进行调度。但是，这样的周期调度方式也会带来问题，如果在目前的循环中，

时间槽2 的数据还没有被传输完毕，那么它就会占据下一个循环的时间槽1 的传

输。为此，时间感知整形器在时间槽2 后面加入了保护带，保护带内不允许传输

新的业务流量，只允许传输目前正在传输的流量。这样可以确保时间敏感流量在

时间槽1 中得到优先传输，同时非时间敏感流量在时间槽2 中传输，避免争用问

题。加入保护带的TAS 工作原理如图3-1 所示。

图3-1 加入保护带的TAS 工作原理

在TAS 进行流量调度时，会利用门控列表（GCL）来控制帧的出队列操作。

第三章 基于时间窗口的TT 流调度方法

每个端口中的每个优先级队列都有一个门控列表用于定义每个队列的门控状态

和门控时间，门控列表决定了数据帧的传输时间和顺序。门控状态表示门的开关

状态，即打开或关闭。其中1 表示门打开，0 表示门关闭。在门打开的情况下，

可以有选择地发送队列中的数据帧；在门关闭的情况下，这个队列中的数据帧将

不被选取。门控列表确定了数据帧队列的传输时刻，每个队列在到达时可以选择

传输数据帧以实现传输需求。当存在多个打开的门时，具有最高优先级的队列可

以传输数据帧并阻塞其他队列，直到它为空或相应的门关闭，这是一种确保高优

先级数据帧及时传输的机制。门控调度原理如图3-2 所示，在门控列表中T0 时

刻的门控状态为10010000，意味着在T0 时刻只有队列1 和队列4 对应的门处于

打开状态，其余队列对应的门均为关闭状态，即此时刻只有队列1 和4 可以对数

据帧进行传输。通过GCL 的控制，TAS 可以根据时钟同步周期性地打开门，实

现对流量的有序传输。不同的流队列可以根据GCL 的设置选择适当的调度算法，

从而实现对不同类型流量的灵活调度和管理。这种机制有助于提高网络的性能和

可靠性，特别是在需要保障TT 流传输的场景下。

图3-2 门控调度原理示意图

解决TT 流调度问题的关键在于对门控列表的求解，这也是广大学者在TSN

流量调度中的主要研究方向。在传统的门控调度方法研究中，多是以帧为调度对

象，通过求解每个帧的传输时隙组成门控列表，对于这类帧传输时隙方案求解的

研究现状已在前文有过总结，这种方法可以得到精确的门控列表，但同时也会带

第三章 基于时间窗口的TT 流调度方法

来计算复杂度过高的问题，导致求解时间过长。

3.2 基于时间窗口的ILP 调度方法

本章致力于改善门控列表求解时的计算复杂度过高问题，将以帧为调度对象

改进为以时间窗口为调度对象，通过求解裕度的放大改善计算复杂度。基于第二

章提出的TSN 系统模型，本章所提的调度方法只需要在控制层进行集中设计并

下发至数据平面的TT 流调度相关模块即可，不需要对各个交换机进行分布式配

置。另外第二章已经对TSN 的网络模型与流量模型做了形式化定义，本章将在

此基础上进行基于时间窗口的ILP 调度方法的设计。

3.2.1 调度变量定义

以帧为调度对象时，调度变量为每条流在每个出端口的队列分配

[ , ] a b v v ip 和所

有帧实例的传输时刻

[ , ] a b v v ij  ，保证所有帧无冲突传输并优化传输指标[56]。本文引

入时间窗口作为调度对象，规定每个帧在通过的每条链路上被分配至唯一时间窗

口，且时间窗口大小需大于等于被分配至该窗口的所有帧的传输时间。时间窗口

[ , ] a b v v k w 由一个左边界即时间窗口开始时刻

[ , ] a b v v kl 和一个右边界即时间窗口关闭时

[ , ] a b v v kr 所定义。同时为时间窗口

[ , ] a b v v k w 定义一个布尔数组

[ , ] a b v v ijk I ，它描述帧实例

[ , ] [ , ] a b a b v v v v ij i f F  是否被赋值给时间窗口。另外每条链路的最大时间窗口数量

[ , ] max

a b v v w

也是调度中的一个重要参数。综上，以时间窗口为调度对象时，调度变量为时间

窗口的开始时刻

[ , ] a b v v kl 、关闭时刻

[ , ] a b v v kr 、时间窗口赋值变量

[ , ] a b v v ijk I ，调度变量的

改变是时间窗口调度方法与帧调度方法的关键区别。在本章的第4 节中提出了优

化时间窗口偏移量方法，时间窗口偏移量用

[ , ] a b v v k Offset 表示。此时GCL 可以被重

新定义为一个元组形式：

[ , ] [ , ] [ , ] { :( , ), } a b a b a b v v v v v v k k k k l r Offset 。

3.2.2 调度约束表达

（1）时间窗口定义约束

时间窗口定义约束是

[ , ] a b v v kl 和

[ , ] a b v v kr 的基本约束。要求在[ , ] a b v v 链路上的每个

时间窗口的打开时刻必须为非负，且打开和关闭事件在所有流的超周期内，如式

（3-1）、式（3-2）所示。

[ , ] max [ , ] , {1,..., }: a b v v a b i v v R k w   

第三章 基于时间窗口的TT 流调度方法

[ , ] 0 a b v v kl  (3-1)

[ , ] [ , ] a b a b v v v v kr hp  (3-2)

另外定义时间窗口的打开和关闭事件顺序，要求同一时间窗口的打开时刻小

于等于关闭时刻，如式（3-3）所示。

[ , ] max [ , ] , {1,..., }: a b v v a b i v v R k w   

[ , ] [ , ] a b a b v v v v k k l r  (3-3)

（2）时间窗口有序约束

为了保证无冲突传输需要定义链路约束，即不允许同一链路上的时间窗口重

叠。同时定义同一链路上不同时间窗口的顺序，按顺序关联各个时间窗口的打开

和关闭事件即可满足链路约束。因此，要求同一链路上时间窗口的关闭时刻小于

等于下一个时间窗口的打开时刻，如式（3-4）所示。

[ , ] max [ , ] , {1,..., 1}: a b v v a b i v v R k w    

[ , ] [ , ] 1 a b a b v v v v k k r l   (3-4)

另外，由于定义了严格的时间窗口打开和关闭事件顺序，可对式（3-1）、

（3-2）进行简化，将打开事件的边界限制在每个链路的第一个时间窗口，将关

闭事件的边界限制在每个链路的最后一个时间窗口。简化后如式（3-5）、式（3-6）

[ , ] : a b i v v R  

[ , ] 1 0 a b v v l  (3-5)

[ , ] max

[ , ] [ , ] a b a b v v a b v v v v

wr hp  (3-6)

（3）帧到时间窗口赋值约束

定义时间窗口赋值变量

[ , ] a b v v ijk I ，表示帧实例是否被赋值给时间窗口，因此限

制其值为0 或1，如式（3-7）所示。

[ , ] [ , ] [ , ] max [ , ] , {1,..., }, : a b a b a b v v v v v v a b i ij i v v R k w f F     

[ , ] {0,1} a b v v ijk I  (3-7)

通过链路路由的每一帧都必须分配给唯一为该链路定义的时间窗口。由于时

间窗口赋值变量非0 即1，因此要求某一特定帧的所有时间窗口赋值变量的和为

1，如式（3-8）所示。

[ , ] [ , ] [ , ] , : a b a b v v v v a b i ij i v v R f F    

[ , ] max

a b v v

v v ijk k

  (3-8)

第三章 基于时间窗口的TT 流调度方法

（4）时间窗口大小约束

定义时间窗口大小为

[ , ]. a b v v k w size ，其值为分配给某一特定时间窗口的所有帧

传输时长之和，如式（3-9）所示。

[ , ] max [ , ] , {1,..., }: a b v v a b i v v R k w   

[ , ] [ , ]

[ , ] [ , ] [ , ] [ , ] . ( . ) a b a b a b a b

v v v v a b a b ij i

v v v v v v v v k ijk ij ij f F w size I f l

    (3-9)

另外时间窗口打开和关闭事件的时间间隔必定等于时间窗口大小，如式

（3-10）所示。

[ , ] max [ , ] , {1,..., }: a b v v a b i v v R k w   

[ , ] [ , ] [ , ]. a b a b a b v v v v v v k k k r l w size   (3-10)

（5）传输约束

以帧为调度对象的传输约束规定了帧通过路径上每条链路的时序，即同一帧

在前驱链路上的结束时刻必须小于等于后继链路上的开始时刻。将此约束映射到

以时间窗口为调度对象中，先引入变量 , , i k l x 判断同一帧是否分配给了先后两条链

路的时间窗口，如果是，则约束前驱链路上的时间窗口关闭时刻必须小于等于后

继链路上的打开时刻，如式（3-11）、式（3-12）所示。

1 1 2 [ , ] [ , ] 1 max max [ , ] , {1,..., 2}, {1,..., }, {1,..., }: p p p p v v v v p p i v v R p n k w l w          

1 1 2 [ , ] [ , ] , , , , , ,

p p p p v v v v i k l i j k i j l x I I      (3-11)

1 1 2 [ , ] [ , ] , , , ,

p p p p v v v v i k l k i k l l x r x l       (3-12)

（6）端到端时延约束

引入变量 i i

     

表示流 is 每次发送消息所包含的帧数，第 i N 个帧即为

流 is 的最后一帧。

对于流 is ，要求其发送的最后一帧位于最后一条链路的时间窗口关闭时刻与

第一帧位于第一条链路的时间窗口打开时刻之间的差值小于等于流所能容忍的

最大端到端时延，如式（3-13）所示。

1 2 2 3 ( 1) , , , [[ , ],[ , ],...,[ , ]]: i i i i i i i i i i i i i n in s L J S T R v v v v v v      ，

[ , ] ( 1) [ , ] 1 2 max max (n 1) ( 1) i 1 2 1 2 [ , ] [ , ] [ , ] [ , ] 1 1 1 ( ) ( )

v v i n in v v i i i i i in i n in i i i i i i i

w w v v v v v v v v iN l l i k k i l k I r I l L

          (3-13)

（7）抖动约束

第三章 基于时间窗口的TT 流调度方法

抖动约束是为了降低时延波动（如：网络拥塞、突发流量等）对数据传输产

生的影响。对于流 is ，要求其时延变化小于等于流所能容忍的最大抖动。由于时

间窗口的打开和关闭事件顺序已被严格定义，因此流 is 从发送端到接收端的每条

链路上所产生的抖动都会积累到最后一帧所在的最后一条链路。要求流 is 最后一

帧的时间窗口大小必须小于等于流所能容忍的最大抖动与最后一帧的传输时长

之和，如式（3-14）所示。

1 2 2 3 ( 1) , , , , [[ , ],[ , ],...,[ , ]]: i i i i i i i i i i i i i n in s L J S T R v v v v v v     

[ , ] ( 1) max ( 1) ( 1) ( 1) [ , ] [ , ] [ , ]

1 ( . )

v v i n in i i

i n in i n in i n in i i i i i i

w v v v v v v iN l l i iN l I w size J l

        (3-14)

（8）隔离约束

隔离约束是为了降低时延不确定性对数据传输的影响，若有多条流的帧同时

到达同一链路时会导致传输顺序不确定，进而导致时延不确定性。因此以帧为调

度对象的隔离约束规定了一条链路同一时刻只能存储一条流的帧。类似的，当以

时间窗口为调度对象时，假设节点 av 上收到的两条流 is 和s j 分别通过前驱链路

[ , ] x a v v 和[ , ] y a v v ，并且都通过链路[ , ] a b v v 发送，此时需要考虑以下两种情况：

1）将两条流各自的帧分配至同一时间窗口，如式（3-15）所示。

[ , ] [ , ] max [ , ] , , , , {1,..., }: a b a b v v v v a b i i j v v R s s F i j k w      

[ , ] [ , ] ( ) a b a b v v v v ipk jqk I I  (3-15)

2）在时间域中将两条流隔离，即对于链路[ , ] a b v v 上的两条流 is 和s j ，只有

当其中一条流的帧全部离开队列时另一条流的帧才允许进入队列，如式（3-16）

[ , ] [ , ] max [ , ] , , , , {1,..., }, a b a b v v v v a b i i j v v R s s F i j k w      

[ , ] [ , ] max max {1,..., }, {1,..., }: y a x a v v v v l w m w   

[ , ] [ , ] [ , ] [ , ] [ , ] [ , ] [ , ] [ , ] ( ) ( ) ( ) ( ) y a y a a b a b a b a b x a x a v v v v v v v v v v v v v v v v ipk k jqm m jpk k iql l I r I l I r I l        (3-16)

3.2.3 目标函数定义

以时间窗口为调度对象的流量调度问题可以抽象成多维背包问题[57]。多维背

包问题是指在可以承受不同重量的m 个背包中放入n 个物品，不同物品的价值

不同且物品不可分割，目标是最大化放入背包中的物品总价值并且不允许超出各

个背包的承受重量。

对本文提出的调度方法进行映射：将被调度的帧视为不同的物品，每条链路

第三章 基于时间窗口的TT 流调度方法

的时间窗口视为不同的背包，时间窗口大小视为背包的容量，时间窗口赋值变量

表示物品是否放入背包。目标是确定各个时间窗口的开闭时刻和时间窗口赋值变

量，使得所有被调度流的总端到端时延最小化。

定义流 is 的端到端时延为 i Delay ，表达式如式（3-17）所示。

[ , ] ( 1) [ , ] 1 2 max max ( 1) ( 1) 1 2 1 2 [ , ] [ , ] [ , ] [ , ] 1 1 1

v v i n in v v i i i i i n in i n in i i i i i i i i

w w v v v v v v v v i iN l l i k k l k Delay I r I l

          (3-17)

目标函数如式（3-18）所示。

i s S u n Minimize Delay

   (3-18)

3.2.4 实验仿真与验证

（1）仿真实验环境

为了验证本文提出的调度方法的有效性，采用线性规划软件Gurobi 实现基

于时间窗口的整数线性规划调度方案并进行求解。基于Python 搭建仿真实验平

台，仿真实验在具有2.5GHz 和16GB RAM 的Intel Core i5-12500H 处理器上运

行。采用Gurobi v10.0.2 作为优化器求解调度方案，Gurobi 具有Python API，将

Gurobi 安装到Python 库之后可以直接在其中使用，这对于仿真实验平台的搭建

会更有利[58]。根据本文提出的目标函数与约束条件，Gurobi 优化器将会调用其

内置的分支定界算法对ILP 方案进行迭代求解。代码实现过程如图3-3 所示。

图3-3 Gurobi 代码实现过程

（2）实验方法及结果分析

仿真实例的网络架构模型如图3-4 所示。网络为多交换机多终端互连的交换

式架构，包括4 个端系统和2 个TSN 交换机，对3 条TT 流进行调度。

图3-4 网络架构模型

第三章 基于时间窗口的TT 流调度方法

本章考虑的是时间窗口的调度规划，不需要提前确定路由路径，因此首先根

据网络拓扑结构，规划出3 条TT 流路径：

TT-1： 1 1 1 2 2 3 [[ , ],[ , ],[ , ]] ES SW SW SW SW ES

TT-2： 1 1 1 2 2 4 [[ , ],[ , ],[ , ]] ES SW SW SW SW ES

TT-3： 2 1 1 2 2 4 [[ , ],[ , ],[ , ]] ES SW SW SW SW ES

仿真实验参数设置模拟真实的工业应用数据集，基于工业以太网传输常用的

100 Base-T 标准，设置以太网全双工链路速率为100Mps，单帧长度为1500B。

TT 流参数配置如表3-1 所示。

表3-1 TT 流参数配置

流 源 目的 周期/μs 帧尺寸/B 最大延时/ms 最大抖动/μs

TT-1 ES1 ES3 100 1500 2.5 6

TT-2 ES1 ES4 100 1500 2.5 6

TT-3 ES2 ES4 150 4500 2.5 6

表3-2 和表3-3 为求解结果。根据3 条TT 流的周期可得到超周期为300μs，

TT-1、TT-2、TT-3 在一个超周期内传输的帧个数分别为3、3、6 个。各时间窗

口的时间窗口赋值变量如表3-2 所示，可以从求解结果中得到每个帧的具体分配

以及每条链路的时间窗口个数。以 1 2 [ , ] SW SW 链路的第2 个时间窗口为例，该时

间窗口共负责3 个帧的传输： 1 2 [ , ] 212 1 SW SW I 、 1 2 [ , ] 322 1 SW SW I 和 1 2 [ , ] 332 1 SW SW I 分别代表

TT-2 的第1 个帧、TT-3 的第2 个帧和TT-3 的第3 个帧分配给该时间窗口。根

据 1 2 [ , ] SW SW 上最大k 值为6 可得到在此链路上共有6 个时间窗口。各个时间窗

口的开闭时刻如表3-3 所示。

表3-2 时间窗口赋值变量

时间窗口赋值变量

[ , ] a b v v ijk I

1 1 [ , ] 111 1 ES SW I 

1 1 [ , ] 212 1 ES SW I 

1 1 [ , ] 123 1 ES SW I 

1 1 [ , ] 224 1 ES SW I 

1 1 [ , ] 135 1 ES SW I 

1 1 [ , ] 236 1 ES SW I 

2 1 [ , ] 311 1 ES SW I 

2 1 [ , ] 322 1 ES SW I 

2 1 [ , ] 332 1 ES SW I 

2 1 [ , ] 343 1 ES SW I 

2 1 [ , ] 354 1 ES SW I 

2 1 [ , ] 364 1 ES SW I 

1 2 [ , ] 111 1 SW SW I 

1 2 [ , ] 311 1 SW SW I 

1 2 [ , ] 212 1 SW SW I 

1 2 [ , ] 322 1 SW SW I 

1 2 [ , ] 332 1 SW SW I 

1 2 [ , ] 123 1 SW SW I 

1 2 [ , ] 224 1 SW SW I 

1 2 [ , ] 345 1 SW SW I 

1 2 [ , ] 136 1 SW SW I 

1 2 [ , ] 356 1 SW SW I 

1 2 [ , ] 366 1 SW SW I 

1 2 [ , ] 236 1 SW SW I 

2 3 [ , ] 111 1 SW ES I 

2 3 [ , ] 122 1 SW ES I 

2 3 [ , ] 133 1 SW ES I 

2 4 [ , ] 311 1 SW ES I 

2 4 [ , ] 212 1 SW ES I 

2 4 [ , ] 322 1 SW ES I 

2 4 [ , ] 332 1 SW ES I 

2 4 [ , ] 223 1 SW ES I 

2 4 [ , ] 344 1 SW ES I 

2 4 [ , ] 355 1 SW ES I 

2 4 [ , ] 365 1 SW ES I 

2 4 [ , ] 235 1 SW ES I 

第三章 基于时间窗口的TT 流调度方法

表3-3 时间窗口开闭时刻

k 时间窗口打开关闭时刻

[ , ] [ , ] a b a b v v v v k k l r （ ， ）/μs

1 1 [ , ] ES SW

2 1 [ , ] ES SW

1 2 [ , ] SW SW

2 3 [ , ] SW ES

2 4 [ , ] SW ES

1 (0,12) (33,45) (61,85) (103,115) (115,127)

2 (36,48) (50,74) (90,126) (173,185) (132,168)

3 (100,112) (183,195) (131,143) (224,236) (190,202)

4 (136,148) (200,224) (176,188) —— (207,219)

5 (200,212) —— (195,207) —— (236,272)

6 (236,248) —— (212,260) —— ——

调度方案可以用甘特图形式直观的表示出来，如图3-5 所示。以 1 2 [ , ] SW SW 为

例，作为交换机 1 SW 的出口链路，共有W1 到W6 六个时间窗口。在第一个时间

窗口上传输来自TT-1的第一个帧以及来自TT-3的第一个帧，并通过 2 3 [ , ] SW ES 的

第一个时间窗口以及 2 4 [ , ] SW ES 的第一个时间窗口分别将这两个帧送到目的端

3 ES 和 4 ES ，其余各个帧的传输方式以此类推，组成完整的调度方案。

图3-5 调度方案示意图

将本文提出的基于时间窗口的ILP 调度方法与基于帧的ILP 调度方法[59]、基

于时间窗口的OMT 调度方法[60]进行仿真实验结果对比，如图3-6~图3-7 所示。

本文提出的基于时间窗口的ILP 调度方法总时延为274μs，并且每条流的时延都

远远小于流量最大时延要求2.5ms，证明所设计的调度方案满足TT 流的流量特

性要求。分别与基于帧的ILP 调度方法和基于时间窗口的OMT 调度方法相比，

求解时间分别减少了41%和64%，有效降低了计算复杂度；但总时延分别提高了

7%和21%，流量传输性能有所降低。

第三章 基于时间窗口的TT 流调度方法

图3-6 求解时间对比

图3-7 端到端时延对比

3.3 改进时间窗口偏移量

3.3.1 时间窗口偏移量优化方法

在上述调度方法的仿真结果中可以发现，虽然与以帧为调度对象的调度方法

相比已经有效降低了计算复杂度，但通过对结果分析可以看出此方法对于时延性

能会产生较差的影响。通过对于调度方案示意图的分析得到了以下两个原因，原

因示意图如图3-8 所示：

（1）如图中Q1 所示，在交换机 1 SW 上， 1 1 [ , ] ES SW 链路的第一个时间窗口

关闭之后又过了一段时间第二个时间窗口才打开，这段时间会影响端到端时延性

第三章 基于时间窗口的TT 流调度方法

能，即在调度方法的约束条件设计时未考虑时间窗口的传输相邻问题。此问题是

由于交换机出端口存在大量可用的空闲空间导致的。当存在同一链路上传输的不

同流量的周期相同时，空闲空间可通过流量的周期百分比表示，在一个周期中除

去流量所占空间剩余空间即为空闲空间。首先定义流量中的帧周期百分比为

[ , ] a b v v ij pp ，通过帧传输时长与周期的比值表示，如式（3-19）所示。

[ , ] [ , ] [ , ] = / a b a a b b v v v v v ij ij ij v pp l T (3-19)

然后定义流量的周期百分比为

[ , ] a b v v i pp ，通过特定流量中传输的所有帧的帧

周期百分比之和表示，设第i 流中有n 个帧，可表示为如式（3-20）所示的形式。

[ , ] [ , ]

1 (1, ) = : a b a b n v v v v i ij j n pp pp   (3-20)

在上节的实例中，交换机 1 SW 出端口有TT-1 和TT-2 两条流通过链路

1 1 [ , ] ES SW 进入交换机中，两条流的周期均为100μs，因此可进行空闲空间判断。

在100μs 周期内两条流共计传输2 个帧，单个帧的帧长为1500B，根据链路速率

可得单个帧的传输时长为12μs。因此 1 SW 的流量周期百分比为24%，空闲空间为

76%，空闲空间较大。而在基于时间窗口的ILP 方法设计时，并没有考虑到空闲

空间因素，因此可从缩短时间窗口的时间间隔入手解决此问题。

（2）如图中Q2 所示，在同一个交换机 1 SW 出端口存在来自不同链路

1 1 [ , ] ES SW 和 2 1 [ , ] ES SW 的时间窗口争用问题，这同样会影响端到端时延性能。

图3-8 原因分析示意图

基于上述的原因分析，本节引入时间窗口偏移量

[ , ] a b v v k Offset 来对调度方法进

行改进。时间窗口偏移量指的是时间窗口相对于超周期的起始位置，改进时间窗

口偏移量约束如式（3-21）所示。设链路[ , ] a b v v 存在同周期的不同流量传输，且

链路[ , ] a b v v 共有n 个时间窗口：

第三章 基于时间窗口的TT 流调度方法

{1,......, }: k n 

[ , ] 1

[ , ] [ , ] [ , ] 1 2

[ , ] 1 2

. . , 3

......

a b a b a b

v v v v v v k

v v k k

w size k

Offset w size w size k

w size k n  

               

(3-21)

3.3.2 实验仿真与验证

将新的约束加入上节的调度方法中，重新得到时间窗口赋值变量与各时间窗

口的开闭时刻如表3-4 和表3-5 所示。

表3-4 改进后时间窗口赋值变量

时间窗口赋值变量

[ , ] a b v v ijk I

1 1 [ , ] 111 1 ES SW I 

1 1 [ , ] 212 1 ES SW I 

1 1 [ , ] 123 1 ES SW I 

1 1 [ , ] 224 1 ES SW I 

1 1 [ , ] 135 1 ES SW I 

1 1 [ , ] 236 1 ES SW I 

2 1 [ , ] 311 1 ES SW I 

2 1 [ , ] 322 1 ES SW I 

2 1 [ , ] 332 1 ES SW I 

2 1 [ , ] 343 1 ES SW I 

2 1 [ , ] 354 1 ES SW I 

2 1 [ , ] 364 1 ES SW I 

1 2 [ , ] 111 1 SW SW I 

1 2 [ , ] 211 1 SW SW I 

1 2 [ , ] 312 1 SW SW I 

1 2 [ , ] 322 1 SW SW I 

1 2 [ , ] 332 1 SW SW I 

1 2 [ , ] 123 1 SW SW I 

1 2 [ , ] 223 1 SW SW I 

1 2 [ , ] 344 1 SW SW I 

1 2 [ , ] 354 1 SW SW I 

1 2 [ , ] 364 1 SW SW I 

1 2 [ , ] 135 1 SW SW I 

1 2 [ , ] 235 1 SW SW I 

2 3 [ , ] 111 1 SW ES I 

2 3 [ , ] 122 1 SW ES I 

2 3 [ , ] 133 1 SW ES I 

2 4 [ , ] 211 1 SW ES I 

2 4 [ , ] 312 1 SW ES I 

2 4 [ , ] 322 1 SW ES I 

2 4 [ , ] 332 1 SW ES I 

2 4 [ , ] 223 1 SW ES I 

2 4 [ , ] 344 1 SW ES I 

2 4 [ , ] 354 1 SW ES I 

2 4 [ , ] 364 1 SW ES I 

2 4 [ , ] 235 1 SW ES I 

表3-5 改进后时间窗口开闭时刻

k 时间窗口打开关闭时刻

[ , ] [ , ] a b a b v v v v k k l r （ ， ）/μs

1 1 [ , ] ES SW

2 1 [ , ] ES SW

1 2 [ , ] SW SW

2 3 [ , ] SW ES

2 4 [ , ] SW ES

1 (0,12) (24,36) (12,36) (24,36) (36,48)

2 (12,24) (36,60) (36,72) (124,136) (48,84)

3 (100,112) (174,186) (112,136) (234,246) (136,148)

4 (112,124) (186,210) (186,222) —— (198,234)

5 (200,212) —— (222,246) —— (246,258)

6 (212,224) —— —— —— ——

第三章 基于时间窗口的TT 流调度方法

改进后的调度方案如图3-9 所示，此时可以观察到在 1 2 [ , ] SW SW 链路上共有

5 个时间窗口，这是因为经过时间窗口偏移量的改进之后会将之前时间窗口之间

多余的空闲空间进行合并消除。

图3-9 改进后调度方案示意图

将改进时间窗口偏移量的ILP 调度方法与基于帧的ILP 调度方法、基于时间

窗口的OMT 调度方法以及改进之前的调度方法进行对比，如图3-10~图3-11 所

示，改进时间窗口偏移量的ILP 调度方法总时延为135μs。分别与基于帧的ILP

调度方法和基于时间窗口的OMT 调度方法相比，求解时间分别减少了36%和

61%，有效降低了计算复杂度；总时延分别降低了47%和40%，有效改善了时延性

图3-10 改进后求解时间对比

第三章 基于时间窗口的TT 流调度方法

图3-11 改进后端到端时延对比

3.4 本章小结

本章研究了时间敏感网络中的流量调度技术，针对目前门控调度方法中计算

复杂度过高的问题，提出了基于时间窗口的ILP 调度方法。将调度变量由求解所

有帧实例的传输时刻改进为求解时间裕度，并根据调度变量设计了约束条件与目

标函数，同时提出了时间窗口偏移量优化方法改善时延性能。基于Python 搭建

仿真实验平台并使用Gurobi 优化器得出调度结果，通过仿真实验验证了本章提

出的调度方法的有效性，所提方法在满足时间触发流的流量特性基础上有效降低

了计算复杂度。

第四章 基于绝对优先级的TT 流路由规划方法

第四章 基于绝对优先级的TT 流路由规划方法

本章对基于绝对优先级的实时调度路由算法进行了阐述，包括对路由问题的

分析，对队列优先级选择方法的介绍，对路由决策方法的介绍，对算法实现过程

的介绍。基于OMNET++的NeSTiNg 模块搭建了仿真平台，通过仿真实验对比

了所提算法和SP-TSA 算法、CBS-TSA 算法、SPF 算法在调度成功率和端到端时

延方面的表现。

4.1 TT 流路由问题分析

在第二章提出的TSN 系统架构中包含了SRP 模块，负责为TSN 网络提供路

径控制和预留服务，其可以提供显式的路径控制。也就是说，TSN 中的路由可

以提前规划，不需要像传统以太网那样需要生成树来确定路由。另外，由于TSN

并没有规定固定路由算法的协议标准，因此对于路由算法的选取都是基于用户的

需求进行的，路由算法的设计也是学者们的研究热点。前文对于TSN 中路由算

法的研究现状进行了总结，可以看出目前的研究重点多集中于路由与调度的联合

设计，对于路由规划的整体设计考虑较少。而即使考虑了路由规划，也大多基于

最短路径优先算法（Shortest Path First，SPF）进行路径优化。最短路径优先算法

的应用有两种思路：一种是优化链路利用率，通过将链路利用率进行加权的方式

进行路由算法的设计，即加权最短路径优先算法（weighted Shortest Path First，

wt-SPF）；另一种是优化端到端时延，根据路径上的设备数量即网络拓扑中的节

点数量使用SPF 算法，以确保新增加的流量具有较低的端到端时延。但是，如

果只考虑当前加入流量的低端到端时延，我们无法确定该流量是否能够在截止时

间内成功传输，也不确定新增加的流量是否会因与TSN 节点上其他流量的冲突

而导致其他流量产生新的排队时延，进而影响这些流量的端到端时延，导致这些

流量的数据帧无法在截止时间内完成传输。

4.2 基于绝对优先级的实时调度路由算法

基于上述对于TSN 路由问题的分析，本章致力于在实时调度场景下提高TT

流的可调度性，从而保证TSN 数据传输的确定性。可调度性是指某条流量中的

第四章 基于绝对优先级的TT 流路由规划方法

数据帧是否可以在时限内完成传输，它对数据帧实际传输的端到端时延与传输该

帧的流量的时间限制进行比较。如果数据帧的传输能够满足端到端的截止时间约

束，则该数据帧被认为是可调度的。TSN 的路由规划默认使用传输选择算法

（Transmission selection algorithm，TSA），主要通过绝对优先级（Strict Priority，

SP）或者基于信用的整形器（Credit-Based Shaper，CBS）来实现。本章在绝对

优先级传输选择算法的基础之上，提出了一种基于绝对优先级的实时调度路由算

法（Real-time Scheduling Strict Priority Routing Algorithm，RS-SP），适用于具有

实时约束的TT 流。根据RS-SP 选择的路由传输TT 流，使得流中的所有数据帧

都是可调度的，提高了调度的成功率；同时规划良好的路由路径可以保证新加入

的流量不会影响其他流量的传输时间，从而减少流量的总端到端时延。

4.2.1 优先级选择

RS-SP 算法在选择路由之前，需要先根据优先级确定流量的处理顺序，以确

保新增加的流量不会影响拓扑中已有流量的可调度性，同时保证时延要求更高的

流量可以优先分配到更好的路由。本章使用SP 选择时常用的速率单调调度

（Rate-Monotonic Scheduling，RMS）模型[61]为TT 流分配适当的优先级。

RMS 模型是一种静态优先级调度算法，适用于周期性任务的调度。TT 流为

时延要求较高的周期性业务流量，其周期大小与数据长度都是先验已知的，因此

使用RMS 模型分配TT 流优先级。RMS 模型分配优先级的方式是基于周期的大

小：周期越小，优先级越高。由于RMS 模型将任务的周期定义为与其截止日期

相等，因此对于业务流量来说，较小的周期意味着较短的截止日期，即流量需要

更高的即时性。这也就代表流量的优先级越高，越能被及时处理。根据RMS 模

型的定义，当实时性要求较高的TT 流加入现有拓扑中时，优先级选择可以为其

分配到更优的路径；而当实时性要求较低的TT 流加入现有拓扑中时，优先级选

择可以确保其不会影响其他高实时流的传输。对于TT 流 is S  ，其优先级

i priority 可以表示为如式（4-1）所示。

i priority T  (4-1)

4.2.2 算法设计

基于第二章已经定义好的流量模型，已知每条TT 流 is 采用四元组

[ , , , ] i i i i L J T  定义，分别表示最大端到端时延、最大可容忍抖动、流量载荷和周期

第四章 基于绝对优先级的TT 流路由规划方法

长度；其从发送端 1iv 经过中间节点 2 ( 1) ,...,

i i i n v v 到达接收端

i in v 的路径 iR 可表示为

1 2 2 3 ( 1) [[ , ],[ , ],...,[ , ]] i i i i i i i n in v v v v v v  。定义 i N 代表所有中间节点，l 表示一条链路， , a b l

即表示链路[ , ] a b v v 。定义 ip 表示流 is 传输的确定路径上经过的中间节点与链路的

集合。端到端时延是2018 年由Y.Nakayama 等人定义的[62]。在TSN 网络中，TT

流传输的端到端时延包括四种类型的时延：传输时延、传播时延、排队时延和处

理时延，最终每条TT 流的端到端时延等于四个时延之和。

, , i a b Trans s l d 表示流 is 在链路 , a b l 传输所需的时间，它取决于数据包大小和

链路带宽，is 携带的总数据包长度即为流量载荷 i，链路带宽在第二章已作定义，

符号为 ab c ，传输时延公式如式（4-2）所示。

, , , , i a b Trans i s l a b i ab d l p c

   (4-2)

, a b Prop ld 表示数据包通过链路 , a b l 上通过传输介质传播所需时间，它取

决于传输介质的传播速度和距离，是由物理特性决定的，所以在研究中一般将传

播时延定义为一个常数。

, , i a b Queu s l d 表示数据包在交换机输出队列中等待传输所需的时间。当多

个数据包同时到达交换机出端口时会形成排队，需要等待前面的数据包传输完

处理时延 Prc n d 表示数据包在交换机中进行处理所需的时间。处理时延一般包

括交换机对数据包进行解析、查找转发流表、计算校验等操作。处理时延取决于

交换机的性能和负载情况。

定义TT 流最坏情况下的端到端时延为WCED（worst-case end to end delay），

流 is 在 ip 上传输的WCED 值为 , i i

W s p d 。TT 流路由选择决策定义为如式（4-3）所

, , , i i i i

i i i i

W Prc Trans Prop Queu s p n s l l s l n p l p l p l p d d d d d

            (4-3)

根据上式中各部分的下标表示，可以发现

Prc n d 为交换机之上的处理时延，而

, , i a b Trans s l d 、

, a b Prop ld 、

, , i a b Queu s l d 都为链路时延，因此为了简化运算，定义最坏情况下的链路

第四章 基于绝对优先级的TT 流路由规划方法

时延为WCLL（worst-case link latency），流 is 在链路 , a b l 上传输的WCLL 值为

, , i a b s l  ，表达式如式（4-4）所示。

, , , , , , , i a b i a b a b i a b Trans Prop Queu s l s l l s l d d d     (4-4)

WCED 与WCLL 中各值的对应关系示意如图4-1 所示。TT 流从发送端a 经

过交换机b 和c 传输到接收端d，WCED 的值即为图中的 , i i

W s p d 。链路 , a b l 、, b c l 、,c d l

的WCLL 值分别对应

, , i a b s l  、

, , i b c s l  、

, , i c d s l  ，它们与交换机b 和c 的处理时延

Prc b d 、

Prc cd 共同组成了 , i i

W s p d 。由于流量的优先级 i priority 在流量进入链路之前已被计算

出来，因此假设图中某条TT 流传输到交换机c 时有另外两条流也同时到达。蓝

色方块表示这条TT 流需要传输的两个帧，其优先级为1。绿色和黄色方块代表

另外两条流需要传输的帧，绿色需要传输两个帧，优先级为3；黄色需要传输一

个帧，优先级为2。当这三条流产生冲突时，传输过程如图中的传输时间轴所示，

将优先传输优先级最高的绿色的两个帧，然后传输优先级次之的黄色的一个帧，

最后传输优先级最低的蓝色的两个帧。因此对于新加入链路的蓝色的TT 流来说，

它在链路 ,c d l 上产生的排队时延

, , i c d Queu s l d 是其前面传输的共计三个帧的传输时延，接

着在排队之后会产生自身传输导致的共计两个帧的传输时延

, , i c d Trans s l d ，再加上链路

,c d l 的传播时延

, c d Prop ld ，三者之和即为链路 ,c d l 的

, , i c d s l  。

结合式（4-4）可对式（4-3）进行优化，如式（4-5）所示。优化后的决策公

式由两部分组成，前半部分即为路由经过的各个链路的WCLL 之和；后半部分

为路由经过的所有中间交换节点处理时延之和，已知交换机处理时延 Prc n d 取决于

交换机性能，在此默认TSN 网络中的所有交换机性能一致，即各个中间交换节

点的 Prc n d 相同。

, * i i i i

W Prc Prc s p n s s n i n p l p l p d d d N  

          (4-5)

目前TSN 路由研究中常见的wt-SPF 算法是将链路利用率作为加权参数，寻

找链路利用率总和最小的路由。但如果只通过链路利用率决定路由的话，往往会

导致多个流共享相同状态的链路带宽，忽略了通过同一链路的多个流优先级并不

相同。在这种情况下，当现有网络拓扑新增加一条流时，路由决策并不会考虑经

过同一链路的不同流之间的优先级差异，从而导致为新增加的流选择该链路进行

传输。由于新增加的流在该链路上优先级较低，将会导致该流需要更多的传输时

第四章 基于绝对优先级的TT 流路由规划方法

间。此时如果控制平面将wt-SPF 算法计算所得路由路径提供给调度程序，调度

程序可能无法成功将新增加的流添加进去并为其生成对应的GCL，或者即使成

功生成了GCL，流实际传输的端到端时延也会超过其所能容忍的最大端到端时

延 iL 。因此，与wt-SPF 算法考虑链路利用率不同，本文所设计的RS-SP 算法优

先考虑流的可调度性，确保拓扑中新增加的流能够在截止时间（即流所能容忍的

最大端到端时延 iL ）之前完成传输。首先对每条流量进行计算，将所有可能路由

上的WCED 作为路由决策的基础，以确保所有流量都能在各自的截止时间内完

成传输。然后将符合要求的路由进行基于SP 的传输选择算法计算，确保新增加

的流优先级较高时不会导致与其他流发生帧抢占，避免影响其他流的可调度性。

算法伪代码如表4-1 所示。

图4-1 WCED 与WCLL 各值对应关系

表4-1 RS-SP 算法伪代码

Real-time Scheduling Strict Priority Routing Algorithm (RS-SP)

1） Input: Time-triggered (TT) streams S ; The current network topology ( , ) G n l .

2） Output: The optimal transmission path ip in the network topology ( , ) G n l .

3） Initiate: Divide TT streams S into small partition is according to the period i .

4） for each stream is S  do

5） Set temporary variable ( , ) G G n l  ;

第四章 基于绝对优先级的TT 流路由规划方法

6） for each link l G  do

7） , ( , , ) is l i i getWCLL l T    ; //见式（4-4）

8） , ( , ) is l G setLinkCost l   ;

9） end for

10）for each node n G  do

11） r ( , ) P c i n G setNodeCost N d  ;

12）end for

13） ( ) ip StrictPriority G  ;

14）Compute , i i

W s p i d sum of cost from each link and node in p  ; //见式（4-5）

15）if , &&

W i s p i p NULL d L   then

16） Set ip to G ;

17）else

18）Return error;

19） end if

20）end for

RS-SP 为离线静态算法，当TSN 网络拓扑中新增加一条TT 流时，RS-SP 算

法将为所有TT 流重新规划新的路由路径，保证所有TT 流的可调度性，同时保

证现有拓扑中的TT 流不会受到新增加的流量影响。因此在第1 行中，RS-SP 算

法的输入是一个或多个TT 流的集合S 以及当前网络拓扑 ( , ) G n l 。第2 行中，

RS-SP 算法的输出是每条流的最佳传输路由 ip 。第3~5 行为初始化过程：对S 中

的各个流 is 依次执行算法计算；将当前拓扑G 储存在临时拓扑G中。第6~8 行

是对拓扑G中的所有链路执行的，在第7 行中，将拓扑G中的某条链路l 、当前

计算的流 is 携带的总数据包长度 i和流 is 的周期 iT 作为getWCLL 函数的输入，计

算链路l 上传输的当前流 is 的WCLL 值；在第8 行中，将第7 行计算所得的WCLL

值存储在拓扑G中的链路l 中。同理，第10~11 行是对拓扑G中的所有节点执行

的，在第11 行中将节点的处理时延存储在拓扑G的节点 i N 中。在第13 行中，

选择拓扑G中WCED 值最小的路径并进行传输选择计算，将路由的计算结果存

储在 ip 中。在第14 行中，将第13 行找到的路由 ip 的WCED 值存储在 , i i

W s p d 中。

在第15~18 行中进行判断，第15 行为判断语句，如果找到的路由 ip 非空且其 , i i W s p d

第四章 基于绝对优先级的TT 流路由规划方法

值小于流 is 的截止时间 iL ，则在第16 行中向拓扑G 中添加路由 ip ；如果不满足

第15 行的条件，则在第18 行中显示错误信息并停止RS-SP 算法。最后重复上

述过程直到将S 中的所有 is 都分配了各自的确定路由 ip 。

4.3 实验仿真与验证

4.3.1 仿真环境介绍

本节使用OMNET++搭建TSN 仿真平台，仿真实验环境配置在4GB RAM

和35GB SCSI 的Ubuntu 虚拟机上。基于IEEE 802.1Qbv 协议栈对TSN 网络进行

建模，并安置所提出的RS-SP 算法进行仿真实验，通过丢包率和端到端时延两

个性能指标验证所提算法的有效性。

（1）OMNET++

OMNET++是一个基于对象的离散事件仿真引擎，用于建模和仿真网络通信

系统、分布式系统、嵌入式系统等。它提供了一个用c++编写的核心仿真框架以

及一些实用程序，包括基于eclipse 的IDE、用于分析记录的仿真跟踪的工具、

用于与仿真交互的交互式图形可视化框架、专门用于构建网络拓扑的NED 语言。

OMNET++采用模块化设计，允许用户将系统分解为多个独立的模块，每个模块

负责特定的功能，同时它也提供了丰富的模块库和组件，便于用户实现灵活的系

统建模。OMNET++界面如图4-2 所示，图中所示拓扑包含了6 个发送/接收端和

11 个TSN 交换机。OMNET++的系统建模功能实现主要通过左侧三个文件实现

的：.xml 文件负责配置算法，本文所提出的RS-SP 算法以及运行中需要用到的

传输选择算法、CBS 算法等都是在此文件中进行安置的；.ned 文件负责网络拓扑

结构的搭建，可对拓扑中的交换节点、发送节点、接收节点进行属性设置，确定

各自的数量、名称、连接线、处理时延、带宽等参数；.ini 文件是整个网络的配

置文件，它负责主要的路由参数配置，比如链路传输时延、数据包大小、流量周

期等关键参数，同时还负责将TSN 调度机制引入拓扑中的TSN 交换机。

（2）NeSTiNg

NeSTiNg 是OMNET++中的一个专门用于TSN 的仿真模型，它集成了目前

TSN 协议簇的众多功能，例如时间同步机制、门控机制、基于信用的整形机制

等。由于所提出的RS-SP 算法需要考虑传输选择、路由、帧抢占等算法对TSN

的影响，因此采用OMNET++下的NeSTiNg 模块作为TSN 功能的实现基础。

第四章 基于绝对优先级的TT 流路由规划方法

图4-2 OMNET++界面示意图

4.3.2 仿真平台搭建

本章使用OMNET++搭建仿真平台，建立网络拓扑模拟真实通信场景下的发

送端、接收端、交换机，通过NeSTiNg 组件将TSN 功能配置到交换机上，实现

路由转发的模拟与验证。TSN 网络拓扑示例如图4-3 所示，此拓扑共包含7 个节

点与2 个TSN 交换机，节点的数量与位置均可以通过参数进行设置，本文共进

行了3 节点、5 节点、7 节点、9 节点、11 节点的仿真实验，将在后续参数设置

表中进行呈现。

图4-3 TSN 网络拓扑

我们模拟一个TSN 通信场景：在图4-3 所示的网络拓扑中，robotController

与Node1~4 为发送端，backupServer 和roboticArm 为接收端。假设robotController

发送1 条TT 流传输到roboticArm，Node 1~4 发送1 条TT 流传输到backupServer，

第四章 基于绝对优先级的TT 流路由规划方法

即在目前的拓扑中存在已规划好的路由流表保证上述传输功能的实现。此时，当

Node 4 新增1 条TT 流要求传输到roboticArm 时，需要根据各个路由算法对路由

流表进行重新规划。拓扑中的各个节点都是由子模块组成的复合模块，接下来对

仿真平台搭建中使用到的主要模块进行介绍。

（1）终端节点模块

图4-4 终端节点模块

如图4-4 所示为终端节点robotController 的内部组成，trafGenSchedApp 为流

量发生器，可以根据oscillator 与legacyClock 发出的命令产生相应的TSN 流量。

当模块初始化时，oscillator 将根据调度表进行定时操作，当定时周期到达时将会

控制TSN 流量下发到eth 模块。

（2）TSN 交换机模块

图4-5 TSN 交换机模块

如图4-5 所示为TSN 交换机switchA 的内部组成，它是一个四端口的TSN

交换机模块，下层是交换机和网络的边界，上层通过链路组件连接到其他交换机。

TSN 交换机模块通过eth 模块接收来自发送端或其他交换机的数据帧，随后会通

第四章 基于绝对优先级的TT 流路由规划方法

过processingDelay 模块进行交换机处理时延的模拟，最后通过relayUnit 模块将

数据帧发送到交换机出端口的Queuing 模块中。

（3）出端口排队模块

图4-6 出端口排队模块

如图4-6 所示为交换机出端口排队模块，即Queuing 模块。当接收到来自

relayUnit 模块的数据帧时，queuingFrames 模块会计算帧的PCP 字段，根据PCP

值将其放入相应的传输队列中。图中的[number Of Queues]代表了队列总数，例

如queues 模块如果用queues[8]表示，其含义是queues[0]~ queues[7]共八个队列。

存储在queues 模块中的各个队列将根据tsAlgorithms 模块和tGates 模块进行路由

算法和传输门的选择，本文所提出的RS-SP 算法以及对比算法SP-TSA、

CBS-TSA、SPF 将通过此模块进行具体实施。

仿真平台的参数设置如表4-2 所示。仿真平台建立在NeSTiNg 模型的基础

之上，因此可以实现TSN 路由功能的全栈仿真，各层的协议选择在表中已经列

出。在节点数分别为3，5，7，9，11 的场景下对路由算法进行性能评估。另外，

本仿真实验选择路由研究中常见的恒定比特率（Constant Bit Rate，CBR）连接作

为另一个条件变量[63]，研究不同的CBR 连接条件下丢包率和平均端到端时延两

个性能指标。CBR 是一种网络通信中的数据传输方式，它可以保证数据以固定

的速率传输，不会随着时间或网络条件的变化而改变，这种传输方式通常应用于

实时场景，有助于保证数据的实时性和可靠性。CBR 连接数越多，报文的下发

率越大，可供传输的路由选择就越多；但由于CBR 连接的传输速率是固定的，

因此CBR 连接数的增多可能会导致网络拥塞增加，从而导致网络整体端到端时

延的增加。整体来看，CBR 连接数可优化丢包率但会增大端到端时延，因此仿

真实验将在CBR 连接数分别为5，10，15，20 的场景下评估本文所提算法与三

第四章 基于绝对优先级的TT 流路由规划方法

个对比算法的整体表现。

表4-2 仿真参数设置

参数 值 单位

仿真时间 200 s

仿真工具 OMNET++ N/A

模型 NeSTiNg N/A

节点数 3, 5, 7, 9, 11 个

TSN 通信协议栈 IEEE 802.1Qbv N/A

MAC 层协议 IEEE 802.1Qbv N/A

网络层协议 Ipv4 N/A

传输层协议 UDP N/A

应用层协议 IEEE 802.1ac N/A

帧尺寸 512 Bytes

CBR 连接数 5, 10, 15, 20 N/A

数据类型 CBR N/A

链路速率 3 Mbps

帧间隔 10 μs

所提算法 RS-SP N/A

对比算法 SP-TSA, CBS-TSA, SPF N/A

4.3.3 仿真实验结果分析

本文将所提出的RS-SP 算法与SP-TSA 算法[64]、CBS-TSA 算法[64]、SPF 算

法[65]在不同节点规模的路由场景下进行对比仿真实验，同时结合CBR 连接数对

仿真实验结果进行分析。RS-SP 算法致力于改善TT 流的可调度性，这项指标可

以通过丢包率和平均端到端时延进行综合判断，仿真实验所得结果如下所示。

（1）丢包率

对于路由来讲，节点数的增加代表每个节点到下一跳的可选择路径增多，因

此节点数越多丢包率越小，我们重点关注节点数较大时（拓扑规模较大）的呈现

结果。仿真实验结果显示本文提出的RS-SP 算法整体丢包率较低，即调度成功

率较高，尤其在CBR 连接数较大时更为明显。

第四章 基于绝对优先级的TT 流路由规划方法

a) 5 CBR 连接时丢包率 b) 10 CBR 连接时丢包率

c) 15 CBR 连接时丢包率 d) 20 CBR 连接时丢包率

图4-7 不同CBR 连接时的丢包率对比

不同CBR 连接时的丢包率对比如图4-7 所示。当CBR 连接数为5 和10 时，

CBS-TSA 算法效果最好，其丢包率指标优于RS-SP 算法，这是因为CBS-TSA

算法主要通过基于信用的整形进行路由的传输选择，当CBR 连接数较低时可供

选择传输的路径较少，因此基于信用的路由方式受到此因素的影响比RS-SP 算

法小。当CBR 连接数为15 和20 时，RS-SP 算法的丢包率明显优于其他三种算

法，这说明RS-SP 算法更适用于CBR 连接数较大时的较大规模路由场景。整体

来看，SPF 算法的丢包率性能最差，这也验证了前文对于SPF 算法在路由优化时

存在问题的分析，它重点关注路径的最短传输与链路利用率而忽略了调度成功

率，当实时场景中新增加流量时它并不能保证整体网络流量的可调度性。另外，

注意到本文提出的RS-SP 算法丢包率曲线与SP-TSA 算法的曲线比较相似，这是

因为RS-SP 算法是在SP-TSA 算法基础上做出了实时调度方向的改进，因此更适

用于实时调度场景，仿真实验结果也证明了在任意CBR 连接与任意节点数的情

况下，RS-SP 算法的丢包率性能都优于SP-TSA 算法。当CBR 连接数为20，节

点数为11 时，四种算法的丢包率对比如图4-8 所示。与SPF 算法相比，RS-SP

第四章 基于绝对优先级的TT 流路由规划方法

算法的丢包率指标改善了近21%。

图4-8 11 节点丢包率

（2）平均端到端时延

a) 5 CBR 连接时平均端到端时延 b) 10 CBR 连接时平均端到端时延

c) 15 CBR 连接时平均端到端时延 d) 20 CBR 连接时平均端到端时延

图4-9 不同CBR 连接时的平均端到端时延对比

如图4-9 所示为不同CBR 连接数场景下的各算法平均端到端时延结果对比，

整体来看本文所提出的RS-SP 算法的平均端到端时延最低，性能最好。但当节

点数低于7 个时，SP-TSA 算法的平均端到端时延性能略优于RS-SP，这是由于

第四章 基于绝对优先级的TT 流路由规划方法

拓扑规模较小时路由经过的链路也较少，因此会导致RS-SP 将最坏链路时延作

为路由决策时往往并不能选择到最优路径。这也说明了RS-SP 算法更加适合拓

扑规模较大的路由优化场景。当CBR 连接数为20，节点数为11 时，四种算法

的平均端到端时延对比如图4-10 所示。与SPF 算法相比，RS-SP 算法的平均端

到端时延指标改善了近67%。

图4-10 11 节点平均端到端时延

4.4 本章小结

本章研究了时间敏感网络中的路由优化技术，针对目前实时调度场景下可调

度性不足的问题，提出了基于绝对优先级的实时调度路由算法。基于端到端时延

的四个组成部分建立路由决策，并将最坏情况下端到端时延与绝对优先级传输选

择机制相结合设计路由算法。基于OMNET++下的NeSTiNg 模型搭建仿真实验

平台，通过仿真实验验证了本章提出的路由优化算法的有效性，所提算法可以有

效改善TT 流的丢包率与平均端到端时延，有效提高了实时调度场景下TT 流的

第五章 结论与展望

第五章 结论与展望

5.1 主要结论

本文面向时间敏感网络中基于优先级的流量调度过程，重点针对时间触发类

流量的帧时隙配置求解复杂问题与实时调度场景下的可调度性优化问题进行了

研究。首先，结合软件定义网络提出了时间敏感软件定义网络系统架构，将控制

平面分离出来，实现了调度算法的集中设计统一分配，为后续调度方法与路由算

法的设计提供了平台基础；其次，研究了门控调度机制，同时考虑帧时隙方案求

解复杂的原因，结合时间感知整形器机制的原理提出了一种基于时间窗口的整数

线性规划；最后，考虑实时调度场景下新增流量的可调度性以及对其他流量排队

时延的影响，提出了一种基于绝对优先级的实时调度路由算法。本文的主要研究

工作总结如下：

（1）研究了时间敏感网络的完全集中式配置模型，结合软件定义网络的优

势搭建了系统模型，将控制平面进行逻辑化集中，保证整个时间敏感网络拓扑的

调度算法可以进行统一设计并下发至数据平面中的各个交换机。同时对调度模型

进行了形式化表达，包括网络模型与流量模型。

（2）研究了面向时间触发流的时间感知整形器调度机制，并且针对时隙配

置求解复杂的问题，将以帧为调度对象改进为以时间窗口为调度对象，基于时间

窗口设计了整数线性规划调度方法，使用Gurobi 优化器得到时间窗口赋值变量

与开闭时刻的具体调度方案，同时针对时间触发流的时延性能进行了时间窗口偏

移量优化方法的设计。通过与以帧为调度对象的整数线性规划方法、以时间窗口

为调度对象的OMT 调度方法进行对比仿真实验可得出所设计的调度方法在保证

时间触发流的流量特性基础上降低了计算复杂度，验证了所设计调度方法的有效

（3）研究了面向时间触发流的路由规划问题，针对实时调度场景下新增流

量与现有节点中流量发生冲突导致的调度失败问题，将最坏情况下端到端时延作

为路由决策，考虑截止时间进行路由选择，同时结合绝对优先级传输选择机制进

行了基于绝对优先级的实时调度路由算法设计。将本文所提算法与3 种主流路由

选择算法进行了丢包率和平均端到端时延的对比仿真实验，并根据2 组不同的数

值仿真和仿真实验结果进行对比，验证了所设计路由算法的有效性。

第五章 结论与展望

5.2 研究展望

本文所进行的研究可实现基于优先级的流量调度过程中改进计算复杂度与

优化可调度性的预定目标，但由于时间和能力限制，仍存在一些问题需要进一步

研究，主要包括以下几个方面：

（1）本文所设计的时间敏感软件定义网络系统模型实现了理论上的数控分

离，目前软件定义网络作为一个研究热点，已经有一些厂商研发出了集成软件定

义网络功能的硬件设备。因此，在未来的研究中，可考虑将时间敏感网络与软件

定义网络的硬件进行结合。

（2）本文所提出的基于时间窗口的整数线性规划调度方法是在离线情况下

完成的，在实际应用中各类业务流量除了按照预先分配好的时隙进行调度之外，

还存在动态变化情况，这就涉及到增量调度问题。因此，在动态场景下考虑时间

触发流的流量特性进行调度方法的设计是一个具有挑战性的研究方向。

（3）时间敏感网络中的时间触发流是核心业务流，因此本文专注于考虑时

间触发流的优先调度。然而其他两类业务流量对于数据传输也起着很大作用，它

们是事件触发流量，特点是非周期性随机传输，对于时延要求不高但承载了大多

数应用数据的传输。因此，在后续研究中可以考虑在保证时间触发流性能的基础

上进一步优化事件触发流量的传输性能。

[1] Wollschlaeger M, Sauter T, Jasperneite J. The Future of Industrial Communication:

Automation Networks in the Era of the Internet of Things and Industry 4.0 [J].

IEEE Industrial Electronics Magazine, 2017, 11(1): 17-27.

[2] Ge X. Ultra-Reliable Low-Latency Communications in Autonomous Vehicular

Networks [J]. IEEE Transactions on Vehicular Technology, 2019, 68(5):

5005-5016.

[3] FINZI A, MIFDAOUI A, FRANCES F, et al. Network Calculus-based Timing

Analysis of AFDX networks with Strict Priority and TSN/BLS Shapers [C].

IEEE 13th International Symposium on Industrial Embedded Systems (SIES),

2018: 1-10.

[4] 张维杰, 周志勇, 任涛林, 等. 时间敏感网络核心机制及标准化进展研究[J].

仪器仪表标准化与计量, 2021(3): 4-7.

[5] 杜静. 时间敏感网络关键技术仿真研究[D]. 西安电子科技大学, 2019.

[6] IEEE Standard for Local and Metropolitan Area Networks--Timing and

Synchronization for Time-Sensitive Applications [S]. IEEE Std 802.1AS-2020,

2020: 1-421.

[7] IEEE Standard for Local and metropolitan area networks -- Bridges and Bridged

Networks - Amendment 25: Enhancements for Scheduled Traffic [S]. IEEE Std

802.1Qbv-2015, 2016: 1-57.

[8] IEEE Standard for Local and metropolitan area networks--Frame Replication and

Elimination for Reliability [S]. IEEE Std 802.1CB-2017 , 2017: 1-102.

[9] 徐骁麟. 时间敏感网络技术及其在工业互联网中的应用[J]. 电信网技术,

2018, (05): 1-5.

[10] Li Q, Li D, Jin X, et al. A Simple and Efficient Time-Sensitive Networking

Traffic Scheduling Method for Industrial Scenarios [J]. Electronics, 2020, 9(12):

[11] Lo L, Bello, Steiner W. A Perspective on IEEE Time-Sensitive Networking for

Industrial Communication and Automation Systems [J]. Proceedings of the IEEE,

2019, 107(6): 1094-1120.

[12] Dürr, Frank , Naresh Ganesh Nayak. No-wait Packet Scheduling for IEEE

Time-sensitive Networks (TSN) [C]. Proceedings of the 24th International

Conference on Real-Time Networks and Systems , 2016: 203-212.

[13] 裴金川, 胡宇翔, 田乐, 等. 联合路由规划的时间敏感网络流量调度方法

[J].通信学报, 2022, 43(12): 54-65.

[14] Jin X, Xia C, Guan N, et al. Joint Algorithm of Message Fragmentation and

No-Wait Scheduling for Time-Sensitive Networks [J]. IEEE/CAA Journal of

Automatica Sinica, 2021, 8(2): 478-490.

[15] Zhang Y, Xu Q, Wang S, et al. Scalable No-wait Scheduling with Flow-aware

Model Conversion in Time-Sensitive Networking [C]. IEEE Global

Communications Conference, 2022: 413-418.

[16] Min J, Kim W and Paek J. Co-Optimization Framework for Heterogeneous

Search Spaces in Time-Sensitive Network Planning [J]. IEEE Internet of Things

Journal, 2024, 11(7): 11779-11792.

[17] Nayak, Naresh Ganesh, et al. Routing algorithms for IEEE802.1Qbv networks [J].

SIGBED Rev, 2018, 15(3): 13-18.

[18] 李佳庆, 陈水忠, 魏刚, 等. 基于时间敏感网络的门控调度算法研究[J]. 电

光与控制, 2023, 30(03): 58-62.

[19] Schweissguth E, Timmermann D, Parzyjegla H, et al. ILP-Based Routing and

Scheduling of Multicast Realtime Traffic in Time-Sensitive Networks [C]. 2020

IEEE 26th International Conference on Embedded and Real-Time Computing

Systems and Applications (RTCSA), 2020: 1-11.

[20] Pang Z. Flow Scheduling for Conflict-Free Network Updates in Time-Sensitive

Software-Defined Networks [J]. IEEE Transactions on Industrial Informatics,

2021, 17(3):1668-1678.

[21] Feng Z, Gu Z, Yu H, et al. Online Rerouting and Rescheduling of

Time-Triggered Flows for Fault Tolerance in Time-Sensitive Networking [J].

IEEE Transactions on Computer-Aided Design of Integrated Circuits and

Systems, 2022, 41(11): 4253-4264.

[22] 彭轻羽. 面向工业物联网的TSN 调度算法研究[D]. 浙江理工大学, 2019.

[23] Junhui Jiang, Yuting Li, Xiongfeng Zhang, et al. Assessing the traffic scheduling

method for time-sensitive networking (TSN) by practical implementation [J].

Journal of Industrial Information Integration. 2023, 33(6): 100464.

[24] Chi Y, Zhang H, Liu Y, et al. Flow-Based Joint Programming of Time Sensitive

Task and Network. Electronics. 2023, 12(19): 4103.

[25] Craciunas, Silviu S, et al. Scheduling Real-Time Communication in IEEE

802.1Qbv Time Sensitive Networks [C]. Proceedings of the 24th International

Conference on Real-Time Networks and Systems, 2016: 183-192.

[26] Craciunas, Silviu S, Ramon Serna Oliver [M]. An Overview of Scheduling

Mechanisms for Time-sensitive Networks, 2017.

[27] Kannamma R, Umadevi K. An efficient frame preemption algorithm for

time-sensitive networks using enhanced graph convolutional network with

particle swarm optimization [J]. Measurement: Sensors , 2023, 31(2): 2665-2673.

[28] Li Q, Li D, Jin X, et al. A Simple and Efficient Time-Sensitive Networking

Traffic Scheduling Method for Industrial Scenarios [J]. Electronics, 2020, 9(12):

[29] 任杰. 时间敏感网络混合流按需调度技术研究与实现[D]. 北京交通大学,

[30] Ashjaei, Mohammad. A novel frame preemption model in TSN networks [J].

Syst Archit. 2021, 116(1): 102037.

[31] Gavrilut V, Zarrin B, Pop P, et al. Fault-tolerant topology and routing synthesis

for IEEE time-sensitive networking [C]. 25th International Conference on

Real-Time Networks and Systems, 2017: 267–276.

[32] Huang, Jheng-Yu, et al. A Novel Routing Algorithm for the Acceleration of Flow

Scheduling in Time-Sensitive Networks [J]. Sensors, 2020, 20(21): 6400.

[33] Huang K, Wu J, Jiang X, et al. A Period-Aware Routing Method for IEEE

802.1Qbv TSN Networks [J]. Electronics, 2021, 10(1): 58.

[34] Nayak, Naresh Ganesh. Routing algorithms for IEEE802.1Qbv networks [J].

SIGBED Rev, 2018, 15(3): 13-18.

[35] 冯泽坤, 龚龙庆, 徐丹妮, 等. 时间敏感网络中基于ILP 的动态流量均衡调

度算法[J]. 微电子学与计算机, 2021, 38(06): 33-37.

[36] Wang X, Yao H, Mai T, et al. Joint Routing and Scheduling With Cyclic

Queuing and Forwarding for Time-Sensitive Networks [J]. IEEE Transactions on

Vehicular Technology, 2023, 72(3): 3793-3804.

[37] Lee R, Hou C. A Two-Stage Routing Algorithm for Time-Triggered Flows in

Time Sensitive Networks [C]. 13th International Symposium on Communication

Systems, Networks and Digital Signal Processing (CSNDSP), 2022: 246-251.

[38] Chahed H, Kassler A. TSN Network Scheduling—Challenges and Approaches

[J]. Network. 2023, 3(4): 585-624.

[39] Bülbül S, Fischer M. Reinforcement Learning assisted Routing for Time

Sensitive Networks [J]. IEEE Global Communications Conference, 2022:

3863-3868.

[40] Feng Z, Gu Z, Yu H, et al. Online Rerouting and Rescheduling of

Time-Triggered Flows for Fault Tolerance in Time-Sensitive Networking [J].

IEEE Transactions on Computer-Aided Design of Integrated Circuits and

Systems, 2022, 41(11): 4253-4264.

[41] Yu Q, Wan H, Zhao X, et al. Online Scheduling for Dynamic VM Migration in

Multicast Time-Sensitive Networks [J]. IEEE Transactions on Industrial

Informatics, 2020, 16(6): 3778-3788.

[42] Atallah A, Hamad G, Mohamed A. Routing and Scheduling of Time-Triggered

Traffic in Time-Sensitive Networks [J]. IEEE Transactions on Industrial

Informatics, 2020, 16(7): 4525-4534.

[43] 杨思锦, 庄雷, 宋玉, 等. 多模态网络中时间敏感网络模态的智能调度机制

[J]. 通信学报, 2022, 43(05): 82-91.

[44] Yang L, Wei Y, Yu R, et al. Joint Routing and Scheduling Optimization in

Time-Sensitive Networks Using Graph-Convolutional-Network-Based Deep

Reinforcement Learning [J]. IEEE Internet of Things Journal, 2022, 9(23):

23981-23994.

[45] Xu L. Learning-Based Scalable Scheduling and Routing Co-Design With Stream

Similarity Partitioning for Time-Sensitive Networking [J]. IEEE Internet of

Things Journal, 2022, 9(15): 13353-13363.

[46] Li J, Li Q, Xiong H. Enhancing low‐priority traffic reconfiguration designs in

mixed ‐ critical avionics networks [J]. IET Communications, 2023, 17(13):

1524-1540.

[47] IEEE Standard for Local and metropolitan area networks--Virtual Bridged Local

Area Networks Amendment 14: Stream Reservation Protocol (SRP) [S]. IEEE

Std 802.1Qat-2010 (Revision of IEEE Std 802.1Q-2005), 2010: 1-119.

[48] 张维杰, 周志勇, 任涛林, 等. 时间敏感网络核心机制及标准化进展研究

[J].仪器仪表标准化与计量, 2021, (03): 4-7.

[49] IEEE Standard for Local and Metropolitan Area Networks--Bridges and Bridged

Networks -- Amendment 31: Stream Reservation Protocol (SRP) Enhancements

and Performance Improvements [S]. IEEE Std 802.1Qcc-2018, 2018: 1-208.

[50] Kreutz D, Ramos V, Veríssimo P, et al. Software-Defined Networking: A

Comprehensive Survey [J]. Proceedings of the IEEE, 2015, 103(1): 14-76.

[51] IEEE Standard for Local and Metropolitan Area Networks--Timing and

Synchronization for Time-Sensitive Applications [S]. IEEE Std 802.1AS-2020,

2020: 1-421.

[52] IEEE Standard for Local and metropolitan area networks -- Bridges and Bridged

Networks - Amendment 25 [S]: Enhancements for Scheduled Traffic. IEEE Std

802.1Qbv-2015, 2016: 1-57.

[53] IEEE Standard for Local and Metropolitan Area Networks - Virtual Bridged

Local Area Networks Amendment 12: Forwarding and Queuing Enhancements

for Time-Sensitive Streams [S]. IEEE Std 802.1Qav-2009, 2010: 1-72.

[54] IEEE Standard for Local and metropolitan area networks--Frame Replication and

Elimination for Reliability [S]. IEEE Std 802.1CB-2017, 2017: 1-102.

[55] 平莉. 时间敏感网络流量调度算法研究[D]. 西安电子科技大学, 2022.

[56] 于珊珊. 时间敏感网络门控调度机制研究[D]. 西安电子科技大学, 2022.

[57] 喻学才, 张田文. 多维背包问题的一个蚁群优化算法[J]. 计算机学报, 2008,

(05): 810-819.

[58] Huang K, Wu J, Jiang X, et al. A Period-Aware Routing Method for IEEE

802.1Qbv TSN Networks [J]. Electronics, 2021, 10(1): 58.

[59] Feng T, Yang H. SMT-based Task- and Network-level Static Schedule for Time

Sensitive Network [C]. 2021 International Conference on Communications,

Information System and Computer Engineering (CISCE), 2021: 764-770.

[60] Serna Oliver, Craciunas S and Steiner W. IEEE 802.1Qbv Gate Control List

Synthesis Using Array Theory Encoding [C]. 2018 IEEE Real-Time and

Embedded Technology and Applications Symposium (RTAS), 2018: 13-24.

[61] Liu L, James W. Scheduling Algorithms for Multiprogramming in a

Hard-Real-Time Environment [J]. ACM, 1973, 20(1): 46–61.

[62] Nakayama Y, Hisano D, Kubo T, et al. Low-latency routing scheme for a

fronthaul bridged network [J]. Journal of Optical Communications and

Networking, 2018, 10(1): 14-23.

[63] Shrivastava L, Tomar G, Bhadoria S, et al. Effect of Number of CBR

Connections on the Performance of a Load Balanced Congestion Adaptive

Routing for MANET [C]. 2012 Fourth International Conference on

Computational Intelligence and Communication Networks, 2012: 112-116.

[64] Niklas Reusch, Mohammadreza Barzegaran, Luxi Zhao, et al. Configuration

optimization for heterogeneous time-sensitive networks [J]. Real-Time Syst.

2023, 59(4): 705–747.

[65] Do Y, Oh S, Lim S, et al. Performance Analysis of Traffic Shaping Approaches

in Time-Sensitive Networking(TSN) [C]. 2024 18th International Conference on

Ubiquitous Information Management and Communication (IMCOM), 2024: 1-8.